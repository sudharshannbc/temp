<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Maven User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.desc">http or https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostname" elementType="Argument">
            <stringProp name="Argument.name">hostname</stringProp>
            <stringProp name="Argument.value">stage-identity.apps.nbcuni.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Hostname where IDX enpoints are being hosted </stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(port)}</stringProp>
            <stringProp name="Argument.desc">Application port</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="proxy_host" elementType="Argument">
            <stringProp name="Argument.name">proxy_host</stringProp>
            <stringProp name="Argument.value">${__P(proxy_host)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="proxy_port" elementType="Argument">
            <stringProp name="Argument.name">proxy_port</stringProp>
            <stringProp name="Argument.value">${__P(proxy_port)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="project_build_directory" elementType="Argument">
            <stringProp name="Argument.name">project_build_directory</stringProp>
            <stringProp name="Argument.value">${__P(project_build_directory)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ses_verified_email" elementType="Argument">
            <stringProp name="Argument.name">ses_verified_email</stringProp>
            <stringProp name="Argument.value">idx2.email@gmail.com</stringProp>
            <stringProp name="Argument.desc">The AWS SES verified email for test purposes.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ses_verified_email_from" elementType="Argument">
            <stringProp name="Argument.name">ses_verified_email_from</stringProp>
            <stringProp name="Argument.value">idx2.email@gmail.com</stringProp>
            <stringProp name="Argument.desc">The AWS SES verified email for test purposes(from).</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email_to" elementType="Argument">
            <stringProp name="Argument.name">email_to</stringProp>
            <stringProp name="Argument.value">mailmanidx@gmail.com</stringProp>
            <stringProp name="Argument.desc">reciever of emails from idx-mailman</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_setup_pwd" elementType="Argument">
            <stringProp name="Argument.name">member_setup_pwd</stringProp>
            <stringProp name="Argument.value">password</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_setup_max" elementType="Argument">
            <stringProp name="Argument.name">member_setup_max</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="response_threshold" elementType="Argument">
            <stringProp name="Argument.name">response_threshold</stringProp>
            <stringProp name="Argument.value">200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">The expected response time threshold.</stringProp>
          </elementProp>
          <elementProp name="response_threshold_max" elementType="Argument">
            <stringProp name="Argument.name">response_threshold_max</stringProp>
            <stringProp name="Argument.value">550</stringProp>
            <stringProp name="Argument.desc">threshold for workflows with many low level endpoints included</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mailman_response_threshold" elementType="Argument">
            <stringProp name="Argument.name">mailman_response_threshold</stringProp>
            <stringProp name="Argument.value">1200</stringProp>
            <stringProp name="Argument.desc">The customized Mailman end point response time threshold.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">86400</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="api_key" elementType="Argument">
            <stringProp name="Argument.name">api_key</stringProp>
            <stringProp name="Argument.value">65432165432165432165432165432165</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">SQE Brand</stringProp>
          </elementProp>
          <elementProp name="api_key_1" elementType="Argument">
            <stringProp name="Argument.name">api_key_1</stringProp>
            <stringProp name="Argument.value">65432165432165432165432165432165</stringProp>
            <stringProp name="Argument.desc">SQE Brand</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="api_key_2" elementType="Argument">
            <stringProp name="Argument.name">api_key_2</stringProp>
            <stringProp name="Argument.value">5d70b0ccdca7a4d17b593e709b30fe4a</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="api_key_3" elementType="Argument">
            <stringProp name="Argument.name">api_key_3</stringProp>
            <stringProp name="Argument.value">9e0afda846bda0f7e46f6844c784d87c</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="brand_id" elementType="Argument">
            <stringProp name="Argument.name">brand_id</stringProp>
            <stringProp name="Argument.value">4f0a063a816e4c6b8d2c9ad4becf8b21</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">SQE Brand</stringProp>
          </elementProp>
          <elementProp name="site_id" elementType="Argument">
            <stringProp name="Argument.name">site_id</stringProp>
            <stringProp name="Argument.value">6ed323c3595b489d981174076eb9d763</stringProp>
            <stringProp name="Argument.desc">SQE site</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secret_key" elementType="Argument">
            <stringProp name="Argument.name">secret_key</stringProp>
            <stringProp name="Argument.value">changemewhenyoucan</stringProp>
            <stringProp name="Argument.desc">The &quot;secret_key&quot; value to use for Member.LINK requests. (v1)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="v1_member_put_create_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">v1_member_put_create_dstr_pct</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100%</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="v1_member_put_update_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">v1_member_put_update_dstr_pct</stringProp>
            <stringProp name="Argument.value">6</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100%</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="v1_member_get_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">v1_member_get_dstr_pct</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100%</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="v1_member_get_with_provider_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">v1_member_get_with_provider_dstr_pct</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (was not set in previous script)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="v1_member_login_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">v1_member_login_dstr_pct</stringProp>
            <stringProp name="Argument.value">7</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100%</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="v1_member_logout_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">v1_member_logout_dstr_pct</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100%</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="v1_member_remove_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">v1_member_remove_dstr_pct</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100%</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="v1_member_link_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">v1_member_link_dstr_pct</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100%</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="v1_member_link_noverify_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">v1_member_link_noverify_dstr_pct</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100%</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="v1_member_unlink_noverify_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">v1_member_unlink_noverify_dstr_pct</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100%</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="v1_member_delete_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">v1_member_delete_dstr_pct</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (was not set in previous script)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="v1_member_undelete_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">v1_member_undelete_dstr_pct</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (was not set in previous script)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_put_create_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">member_put_create_dstr_pct</stringProp>
            <stringProp name="Argument.value">6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (v2_member)</stringProp>
          </elementProp>
          <elementProp name="member_put_update_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">member_put_update_dstr_pct</stringProp>
            <stringProp name="Argument.value">9</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (v2_member)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_get_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">member_get_dstr_pct</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (v2_member)</stringProp>
          </elementProp>
          <elementProp name="reset_password_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">reset_password_dstr_pct</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (v2_member)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_remove_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">member_remove_dstr_pct</stringProp>
            <stringProp name="Argument.value">7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (v2_member)</stringProp>
          </elementProp>
          <elementProp name="member_remove_by_client_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">member_remove_by_client_dstr_pct</stringProp>
            <stringProp name="Argument.value">7</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (v2_member)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_delete_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">member_delete_dstr_pct</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (v2_member)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_link_client_resource_executions" elementType="Argument">
            <stringProp name="Argument.name">member_link_client_resource_executions</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (v2_member)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_link_member_resource_executions" elementType="Argument">
            <stringProp name="Argument.name">member_link_member_resource_executions</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (v2_member)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_unlink_client_resource_executions" elementType="Argument">
            <stringProp name="Argument.name">member_unlink_client_resource_executions</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (v2_member)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_unlink_member_resource_executions" elementType="Argument">
            <stringProp name="Argument.name">member_unlink_member_resource_executions</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (v2_member)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_sessions_get_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">member_sessions_get_dstr_pct</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (authentication)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_auth_token_get_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">client_auth_token_get_dstr_pct</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (authentication)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_auth_token_get_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">member_auth_token_get_dstr_pct</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (authentication)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_auth_check_token_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">client_auth_check_token_dstr_pct</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (authentication)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_auth_email_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">client_auth_email_dstr_pct</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (authentication)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_auth_refresh_token_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">member_auth_refresh_token_dstr_pct</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (authentication)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_sessions_delete_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">member_sessions_delete_dstr_pct</stringProp>
            <stringProp name="Argument.value">8</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (authentication)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_sessions_delete_by_cilent_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">member_sessions_delete_by_cilent_dstr_pct</stringProp>
            <stringProp name="Argument.value">8</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (authentication)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_reset_password_token_get_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">member_reset_password_token_get_dstr_pct</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (authentication)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_login_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_login_dstr_pct</stringProp>
            <stringProp name="Argument.value">7</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (workflow)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_config_get_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_config_get_dstr_pct</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (workflow)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_registration_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_registration_dstr_pct</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (workflow)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_member_get_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_member_get_dstr_pct</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (disabled)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_logout_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_logout_dstr_pct</stringProp>
            <stringProp name="Argument.value">8</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (workflow)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_profile_update_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_profile_update_dstr_pct</stringProp>
            <stringProp name="Argument.value">7</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (workflow)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_config_update_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_config_update_dstr_pct</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (workflow)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_config_create_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_config_create_dstr_pct</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (workflow)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_member_remove_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_member_remove_dstr_pct</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (workflow)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_member_delete_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_member_delete_dstr_pct</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (workflow)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_config_delete_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_config_delete_dstr_pct</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (workflow)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_forgot_password_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_forgot_password_dstr_pct</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (workflow)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_forgot_password_with_email_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_forgot_password_with_email_dstr_pct</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (workflow)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_reset_password_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_reset_password_dstr_pct</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (workflow)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_member_link_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_member_link_dstr_pct</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (workflow)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workflow_verify_member_info_with_email_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">workflow_verify_member_info_with_email_dstr_pct</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (disabled)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="wordfilter_create_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">wordfilter_create_dstr_pct</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (disabled)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="wordfilter_update_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">wordfilter_update_dstr_pct</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (disabled)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="wordfilter_get_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">wordfilter_get_dstr_pct</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (disabled)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="wordfilter_delete_dstr_pct" elementType="Argument">
            <stringProp name="Argument.name">wordfilter_delete_dstr_pct</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">Traffic distribution % out of 100% (disabled)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Global User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Content-Type-Json" elementType="Argument">
            <stringProp name="Argument.name">Content-Type-Json</stringProp>
            <stringProp name="Argument.value">application/json; charset=UTF-8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Content-Type-Form" elementType="Argument">
            <stringProp name="Argument.name">Content-Type-Form</stringProp>
            <stringProp name="Argument.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">${Content-Type-Form}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
        <stringProp name="HTTPSampler.port">${port}</stringProp>
        <stringProp name="HTTPSampler.proxyHost">${proxy_host}</stringProp>
        <stringProp name="HTTPSampler.proxyPort">${proxy_port}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Resource paths" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="local_mailman" elementType="Argument">
            <stringProp name="Argument.name">local_mailman</stringProp>
            <stringProp name="Argument.value">192.168.99.100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dev_mailman" elementType="Argument">
            <stringProp name="Argument.name">dev_mailman</stringProp>
            <stringProp name="Argument.value">dev.mailman.nbcuext.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="qa_mailman" elementType="Argument">
            <stringProp name="Argument.name">qa_mailman</stringProp>
            <stringProp name="Argument.value">qa.mailman.nbcuext.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="stage_mailman" elementType="Argument">
            <stringProp name="Argument.name">stage_mailman</stringProp>
            <stringProp name="Argument.value">mailmanstg.apps.nbcuni.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="prod_mailman" elementType="Argument">
            <stringProp name="Argument.name">prod_mailman</stringProp>
            <stringProp name="Argument.value">api.nbcuni.com/mailman</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="v2" elementType="Argument">
            <stringProp name="Argument.name">v2</stringProp>
            <stringProp name="Argument.value">/v2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">The v2 resource URI.</stringProp>
          </elementProp>
          <elementProp name="oauth" elementType="Argument">
            <stringProp name="Argument.name">oauth</stringProp>
            <stringProp name="Argument.value">/oauth/token?username=</stringProp>
            <stringProp name="Argument.desc">The &quot;oauth&quot; resource URI.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sessions_oauth" elementType="Argument">
            <stringProp name="Argument.name">sessions_oauth</stringProp>
            <stringProp name="Argument.value">/oauth</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sites" elementType="Argument">
            <stringProp name="Argument.name">sites</stringProp>
            <stringProp name="Argument.value">/sites/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">The &quot;sites&quot; resource URI.</stringProp>
          </elementProp>
          <elementProp name="brands" elementType="Argument">
            <stringProp name="Argument.name">brands</stringProp>
            <stringProp name="Argument.value">/brands/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">The &quot;brands&quot; resource URI.</stringProp>
          </elementProp>
          <elementProp name="members" elementType="Argument">
            <stringProp name="Argument.name">members</stringProp>
            <stringProp name="Argument.value">/members/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">The &quot;members&quot; resource URI.</stringProp>
          </elementProp>
          <elementProp name="providers" elementType="Argument">
            <stringProp name="Argument.name">providers</stringProp>
            <stringProp name="Argument.value">/providers/</stringProp>
            <stringProp name="Argument.desc">The &quot;providers&quot; resource URI.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member" elementType="Argument">
            <stringProp name="Argument.name">member</stringProp>
            <stringProp name="Argument.value">member</stringProp>
            <stringProp name="Argument.desc">The &quot;member&quot; resource path argument.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delete" elementType="Argument">
            <stringProp name="Argument.name">delete</stringProp>
            <stringProp name="Argument.value">/delete?</stringProp>
            <stringProp name="Argument.desc">The Member.DELETE URL argument.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="explain" elementType="Argument">
            <stringProp name="Argument.name">explain</stringProp>
            <stringProp name="Argument.value">/explain?</stringProp>
            <stringProp name="Argument.desc">The Member.EXPLAIN URL argument.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="get" elementType="Argument">
            <stringProp name="Argument.name">get</stringProp>
            <stringProp name="Argument.value">/get?</stringProp>
            <stringProp name="Argument.desc">The Member.GET URL argument.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="link" elementType="Argument">
            <stringProp name="Argument.name">link</stringProp>
            <stringProp name="Argument.value">/link?</stringProp>
            <stringProp name="Argument.desc">The Member.LINK URL argument.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="link_noverify" elementType="Argument">
            <stringProp name="Argument.name">link_noverify</stringProp>
            <stringProp name="Argument.value">/link_noverify?</stringProp>
            <stringProp name="Argument.desc">The Member.LINK_NOVERIFY URL argument.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="login" elementType="Argument">
            <stringProp name="Argument.name">login</stringProp>
            <stringProp name="Argument.value">/login?</stringProp>
            <stringProp name="Argument.desc">The Member.LOGIN URL argument.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logout" elementType="Argument">
            <stringProp name="Argument.name">logout</stringProp>
            <stringProp name="Argument.value">/logout?</stringProp>
            <stringProp name="Argument.desc">The Member.LOGOUT URL argument.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="put" elementType="Argument">
            <stringProp name="Argument.name">put</stringProp>
            <stringProp name="Argument.value">/put?</stringProp>
            <stringProp name="Argument.desc">The Member.PUT URL argument.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="remove" elementType="Argument">
            <stringProp name="Argument.name">remove</stringProp>
            <stringProp name="Argument.value">/remove?</stringProp>
            <stringProp name="Argument.desc">The Member.REMOVE URL argument.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="undelete" elementType="Argument">
            <stringProp name="Argument.name">undelete</stringProp>
            <stringProp name="Argument.value">/undelete?</stringProp>
            <stringProp name="Argument.desc">The Member.UNDELETE URL argument.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="unlink" elementType="Argument">
            <stringProp name="Argument.name">unlink</stringProp>
            <stringProp name="Argument.value">/unlink?</stringProp>
            <stringProp name="Argument.desc">The Member.UNLINK URL argument.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="access_args" elementType="Argument">
            <stringProp name="Argument.name">access_args</stringProp>
            <stringProp name="Argument.value">API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="Argument.desc">The access URL arguments for the APIs.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_resource_uri" elementType="Argument">
            <stringProp name="Argument.name">client_resource_uri</stringProp>
            <stringProp name="Argument.value">${v2}${brands}${brand_id}${members}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">The client resource URI without the member id.</stringProp>
          </elementProp>
          <elementProp name="client_resource_member_link_uri" elementType="Argument">
            <stringProp name="Argument.name">client_resource_member_link_uri</stringProp>
            <stringProp name="Argument.value">${v2}${brands}${brand_id}${members}${client_resource_member_link_id}${providers}</stringProp>
            <stringProp name="Argument.desc">The client resource Member.LINK URI without the provider name and provider id.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_resource_member_link_uri" elementType="Argument">
            <stringProp name="Argument.name">member_resource_member_link_uri</stringProp>
            <stringProp name="Argument.value">${v2}${sites}${site_id}${members}${member_resource_member_link_id}${providers}</stringProp>
            <stringProp name="Argument.desc">The member resource Member.LINK URI without the provider name and provider id.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_resource_member_unlink_uri" elementType="Argument">
            <stringProp name="Argument.name">client_resource_member_unlink_uri</stringProp>
            <stringProp name="Argument.value">${v2}${brands}${brand_id}${members}${client_resource_member_unlink_id}${providers}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">The client resource Member.UNLINK URI without the provider name and provider id.</stringProp>
          </elementProp>
          <elementProp name="member_resource_member_unlink_uri" elementType="Argument">
            <stringProp name="Argument.name">member_resource_member_unlink_uri</stringProp>
            <stringProp name="Argument.value">${v2}${sites}${site_id}${members}${member_resource_member_unlink_id}${providers}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_token_uri" elementType="Argument">
            <stringProp name="Argument.name">member_token_uri</stringProp>
            <stringProp name="Argument.value">${v2}${oauth}${site_id}:${member_session_id}&amp;password=${member_setup_pwd}&amp;grant_type=password&amp;scope=account_management</stringProp>
            <stringProp name="Argument.desc">The member session token URI.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_delete" elementType="Argument">
            <stringProp name="Argument.name">member_delete</stringProp>
            <stringProp name="Argument.value">${member}${delete}${access_args}</stringProp>
            <stringProp name="Argument.desc">The complete Member.DELETE resource path.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_explain" elementType="Argument">
            <stringProp name="Argument.name">member_explain</stringProp>
            <stringProp name="Argument.value">${member}${explain}${access_args}</stringProp>
            <stringProp name="Argument.desc">The complete Member.EXPLAIN resource path.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_get" elementType="Argument">
            <stringProp name="Argument.name">member_get</stringProp>
            <stringProp name="Argument.value">${member}${get}${access_args}</stringProp>
            <stringProp name="Argument.desc">The complete Member.GET resource path.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_link" elementType="Argument">
            <stringProp name="Argument.name">member_link</stringProp>
            <stringProp name="Argument.value">${member}${link}${access_args}</stringProp>
            <stringProp name="Argument.desc">The complete Member.LINK resource path.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_link_noverify" elementType="Argument">
            <stringProp name="Argument.name">member_link_noverify</stringProp>
            <stringProp name="Argument.value">${member}${link_noverify}${access_args}</stringProp>
            <stringProp name="Argument.desc">The complete Member.LINK_NOVERIFY resource path.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_login" elementType="Argument">
            <stringProp name="Argument.name">member_login</stringProp>
            <stringProp name="Argument.value">${member}${login}${access_args}</stringProp>
            <stringProp name="Argument.desc">The complete Member.LOGIN resource path.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_logout" elementType="Argument">
            <stringProp name="Argument.name">member_logout</stringProp>
            <stringProp name="Argument.value">${member}${logout}${access_args}</stringProp>
            <stringProp name="Argument.desc">The complete Member.LOGOUT resource path.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_put" elementType="Argument">
            <stringProp name="Argument.name">member_put</stringProp>
            <stringProp name="Argument.value">${member}${put}${access_args}</stringProp>
            <stringProp name="Argument.desc">The complete Member.PUT resource path.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_remove" elementType="Argument">
            <stringProp name="Argument.name">member_remove</stringProp>
            <stringProp name="Argument.value">${member}${remove}${access_args}</stringProp>
            <stringProp name="Argument.desc">The complete Member.REMOVE resource path.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_undelete" elementType="Argument">
            <stringProp name="Argument.name">member_undelete</stringProp>
            <stringProp name="Argument.value">${member}${undelete}${access_args}</stringProp>
            <stringProp name="Argument.desc">The complete Member.UNDELETE resource path.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="member_unlink" elementType="Argument">
            <stringProp name="Argument.name">member_unlink</stringProp>
            <stringProp name="Argument.value">${member}${unlink}${access_args}</stringProp>
            <stringProp name="Argument.desc">The complete Member.UNLINK resource path.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="check_token" elementType="Argument">
            <stringProp name="Argument.name">check_token</stringProp>
            <stringProp name="Argument.value">/check_token</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="idx_email" elementType="Argument">
            <stringProp name="Argument.name">idx_email</stringProp>
            <stringProp name="Argument.value">/idx/email</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Member setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1437273878000</longProp>
        <longProp name="ThreadGroup.end_time">1437273878000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Global Member List BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

try{
	//create global member list via property
	JMeterUtils.setProperty(&quot;memberId_list&quot;, &quot;&quot;);		
	JMeterUtils.setProperty(&quot;username_list&quot;, &quot;&quot;);

	JMeterUtils.setProperty(&quot;v1_memberId_list&quot;, &quot;&quot;);		
	JMeterUtils.setProperty(&quot;v1_username_list&quot;, &quot;&quot;);
			
	JMeterUtils.setProperty(&quot;wordfilterId_list&quot;, &quot;&quot;);
	JMeterUtils.setProperty(&quot;wordfilterContext_list&quot;, &quot;&quot;);

	JMeterUtils.setProperty(&quot;workflowId_list&quot;, &quot;&quot;);
	JMeterUtils.setProperty(&quot;workflowContext_list&quot;, &quot;&quot;);
	JMeterUtils.setProperty(&quot;workflowProcess_list&quot;, &quot;&quot;);
	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;member setUp Thread Group&apos; -&gt; &apos;Global Member List BeanShell Sampler&apos;.&quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="User Variable Setter BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

String app_port = vars.get(&quot;port&quot;);
String proxy_host = vars.get(&quot;proxy_host&quot;);
String proxy_port = vars.get(&quot;proxy_port&quot;);

//log.info(&quot;app_port = &quot; + app_port);
//log.info(&quot;proxy_host = &quot; + proxy_host);
//log.info(&quot;proxy_port = &quot; + proxy_port);
//System.out.println(&quot;app_port = &quot; + app_port);
//System.out.println(&quot;proxy_host = &quot; + proxy_host);
//System.out.println(&quot;proxy_port = &quot; + proxy_port);

//make JMeter proxy variable. fields empty if not set via command args which will equate to 1
if(proxy_host.equals(&quot;1&quot;) || proxy_port.equals(&quot;1&quot;)){	
	vars.put(&quot;proxy_host&quot;, &quot;&quot;);
	vars.put(&quot;proxy_port&quot;, &quot;&quot;);	
	log.info(&quot;No proxy was used.&quot;);
}

if(app_port.equals(&quot;1&quot;)){	
	vars.put(&quot;port&quot;, &quot;&quot;);
	log.info(&quot;No application port was used.&quot;);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="client token HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/oauth/token?grant_type=client_credentials&amp;scope=write</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import java.util.Random;


try{
	//encode and save client credentials
	String idNotNull = vars.get(&quot;api_key&quot;);
     String secretNotNull = &quot;&quot;;
     String userCredentials = idNotNull + &quot;:&quot; + secretNotNull;
     final byte[] authBytes = userCredentials.getBytes(StandardCharsets.UTF_8);
	String encodedCredentials = Base64.encodeBase64String(authBytes);
	vars.put(&quot;encodedCredentials&quot;, encodedCredentials);
 	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member setUp Thread Group&apos; -&gt; &apos;client token HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	//get client token id
	String id = jsonObj.get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;client_token_id&quot;, id);
	JMeterUtils.setProperty(&quot;client_token_id&quot;, id);
}
catch (Exception ex){
	log.error(&quot;Error in &apos;member setUp Thread Group&apos; -&gt; &apos;client token HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentials}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="client token with member.email HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/oauth/token?grant_type=client_credentials&amp;scope=member.email</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import java.util.Random;


try{
	//encode and save client credentials
	String idNotNull = vars.get(&quot;api_key&quot;);
     String secretNotNull = &quot;&quot;;
     String userCredentials = idNotNull + &quot;:&quot; + secretNotNull;
     final byte[] authBytes = userCredentials.getBytes(StandardCharsets.UTF_8);
	String encodedCredentials = Base64.encodeBase64String(authBytes);
	vars.put(&quot;encodedCredentials&quot;, encodedCredentials);
 	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member setUp Thread Group&apos; -&gt; &apos;client token HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	//get client token id
	String id = jsonObj.get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;client_token_member_email_id&quot;, id);
	JMeterUtils.setProperty(&quot;client_token_member_email_id&quot;, id);
}
catch (Exception ex){
	log.error(&quot;Error in &apos;member setUp Thread Group&apos; -&gt; &apos;client token with member.email HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentials}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create workflow registration config HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${config_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/registration</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_registration&quot;);
	payload.addProperty(&quot;process&quot;, &quot;registration&quot;);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
	
	vars.put(&quot;config_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;member setUp Thread Group&apos; -&gt; &apos;create config HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;config_id&quot;, id);
	JMeterUtils.setProperty(&quot;config_id&quot;, id);
}
catch (Exception ex){
	log.error(&quot;Error in &apos;member setUp Thread Group&apos; -&gt; &apos;create config HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create workflow registration with email config HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${registration_with_email_config_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/registration</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import java.util.Random;
import java.lang.*;

try{

	// Store a unique value for concatenation.
	String uniqueVal = &quot;Uniq_&quot; + System.currentTimeMillis() + &quot;_&quot; + Thread.currentThread().getId();
		
	// Store the &quot;subject&quot; property.
	String subject = SQE + &quot; forgot password email subject - &quot; + uniqueVal;
	String linkString = &quot;{\$link}&quot;;
	// Store the &quot;html&quot; property.
	String htmlText = &quot;&lt;html&gt;&lt;head&gt;%&quot; + SQE + &quot; Member Registration &quot; + uniqueVal + &quot;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&quot;
      	+ &quot;&lt;a href=\&quot;https://wiki.inbcu.com/display/DPIMSE/IDX2.0+How+to+send+email+via+mailman\&quot;&gt;&quot;
      	+ &quot;How to send email via Mailman&lt;/a&gt;&lt;br/&gt;Member Registration&lt;/body&gt;&lt;/html&gt;&quot;;

	// Store the &quot;text&quot; property.
	String text = SQE + &quot;Member Registration &quot; + linkString;
	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_registration&quot;);
	payload.addProperty(&quot;process&quot;, &quot;registration&quot;);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
	payload.addProperty(&quot;default_account_status&quot;, &quot;active&quot;);
	JsonArray verifcationChannels = new JsonArray();
     verifcationChannels.add(new JsonPrimitive(&quot;email&quot;));
	payload.add(&quot;verification_channels&quot;, verifcationChannels);
	//add email template
	JsonObject emailTemplate = new JsonObject();
	emailTemplate.addProperty(&quot;link&quot;, &quot;http://google.com&quot;);
	emailTemplate.addProperty(&quot;from&quot;, &quot;${ses_verified_email_from}&quot;);
	emailTemplate.addProperty(&quot;subject&quot;, subject);
	emailTemplate.addProperty(&quot;html&quot;, htmlText);
	emailTemplate.addProperty(&quot;text&quot;, text);
    	payload.add(&quot;email_template&quot;, emailTemplate);
	
	vars.put(&quot;registration_with_email_config_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Setup Thread Group&apos; -&gt; &apos;create workflow registration with email config HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;registration_with_email_config_id&quot;, id);
	JMeterUtils.setProperty(&quot;registration_with_email_config_id&quot;, id);
}
catch (Exception ex){
	log.error(&quot;Error in &apos;workflow setUp Thread Group&apos; -&gt; &apos;create workflow registration with email config HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create workflow verify member info config HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${verify_member_info_config_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/verify_member_info</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_verify_member_info&quot;);
	payload.addProperty(&quot;process&quot;, &quot;verify_member_info&quot;);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
	
	vars.put(&quot;verify_member_info_config_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;workflow setUp Thread Group&apos; -&gt; &apos;create workflow verify member info config HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;verify_membr_info_config_id&quot;, id);
	JMeterUtils.setProperty(&quot;verify_member_info_config_id&quot;, id);
}
catch (Exception ex){
	log.error(&quot;Error in &apos;workflow setUp Thread Group&apos; -&gt; &apos;create workflow verify member info config HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create workflow profile update config HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${profile_update_config_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/update</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_profile_update&quot;);
	payload.addProperty(&quot;process&quot;, &quot;update&quot;);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
	
	vars.put(&quot;profile_update_config_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;workflow setUp Thread Group&apos; -&gt; &apos;create workflow profile update config HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;profile_update_config_id&quot;, id);
	JMeterUtils.setProperty(&quot;profile_update_config_id&quot;, id);
}
catch (Exception ex){
	log.error(&quot;Error in &apos;workflow setUp Thread Group&apos; -&gt; &apos;create workflow profile update config HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create workflow member delete with data remove config HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_remove_config_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/delete</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_delete_with_data_remove&quot;);
	payload.addProperty(&quot;process&quot;, &quot;delete&quot;);
	payload.addProperty(&quot;remove_member_data&quot;, &quot;true&quot;);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
	
	vars.put(&quot;member_remove_config_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow member delete with data remove config HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;member_remove_config_id&quot;, id);
	JMeterUtils.setProperty(&quot;member_remove_config_id&quot;, id);
	//log.info(&quot;member_remove_config_id = &quot; + vars.get(&quot;member_remove_config_id&quot;));
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow member delete with data remove config HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create workflow member delete config HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_delete_config_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/delete</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_delete&quot;);
	payload.addProperty(&quot;process&quot;, &quot;delete&quot;);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
	
	vars.put(&quot;member_delete_config_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow member delete config HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;member_delete_config_id&quot;, id);
	JMeterUtils.setProperty(&quot;member_delete_config_id&quot;, id);
	//log.info(&quot;member_delete_config_id = &quot; + vars.get(&quot;member_delete_config_id&quot;));
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow member delete config HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create workflow login config HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${login_config_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_login&quot;);
	payload.addProperty(&quot;process&quot;, &quot;login&quot;);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
    
	vars.put(&quot;login_config_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow login config HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;login_config_id&quot;, id);
	JMeterUtils.setProperty(&quot;login_config_id&quot;, id);
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow login config HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create workflow logout config HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${logout_config_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/logout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_logout&quot;);
	payload.addProperty(&quot;process&quot;, &quot;logout&quot;);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
    
	vars.put(&quot;logout_config_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow logout config HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;logout_config_id&quot;, id);
	JMeterUtils.setProperty(&quot;logout_config_id&quot;, id);
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow logout config HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create workflow forgot password config HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${forgot_password_config_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/forgot_password</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_forgot_password&quot;);
	payload.addProperty(&quot;process&quot;, &quot;forgot_password&quot;);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
    	payload.addProperty(&quot;channel&quot;, &quot;response&quot;);
    	
	vars.put(&quot;forgot_password_config_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow forgot password config HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;forgot_password_config_id&quot;, id);
	JMeterUtils.setProperty(&quot;forgot_password_config_id&quot;, id);
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow forgot password config HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create workflow forgot password with email config HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${forgot_password_with_email_config_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/forgot_password</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import java.lang.*;

try{
	// Store a constant for SQE text.
	String SQE = &quot;SQE Performance&quot;;
	
	// Store a unique value for concatenation.
	String uniqueVal = &quot;Uniq_&quot; + System.currentTimeMillis() + &quot;_&quot; + Thread.currentThread().getId();
		
	// Store the &quot;subject&quot; property.
	String subject = SQE + &quot; forgot password email subject - &quot; + uniqueVal;
	String linkString = &quot;{\$link}&quot;;
	// Store the &quot;html&quot; property.
	String htmlText = &quot;&lt;html&gt;&lt;head&gt;%&quot; + SQE + &quot; Forgot Password Requested by Member &quot; + uniqueVal + &quot;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&quot;
      	+ &quot;&lt;a href=\&quot;https://wiki.inbcu.com/display/DPIMSE/IDX2.0+How+to+send+email+via+mailman\&quot;&gt;&quot;
      	+ &quot;How to send email via Mailman&lt;/a&gt;&lt;br/&gt;Forgot Password Requested by Member&lt;/body&gt;&lt;/html&gt;&quot;;

	// Store the &quot;text&quot; property.
	String text = SQE + &quot;Forgot Password Requested by Member &quot; + linkString;
	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_forgot_password&quot;);
	payload.addProperty(&quot;process&quot;, &quot;forgot_password&quot;);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
    	payload.addProperty(&quot;channel&quot;, &quot;email&quot;);
    	JsonObject emailTemplate = new JsonObject();
	emailTemplate.addProperty(&quot;link&quot;, &quot;http://google.com&quot;);
	emailTemplate.addProperty(&quot;from&quot;, &quot;${ses_verified_email_from}&quot;);
	emailTemplate.addProperty(&quot;subject&quot;, subject);
	emailTemplate.addProperty(&quot;html&quot;, htmlText);
	emailTemplate.addProperty(&quot;text&quot;, text);

	
    	payload.add(&quot;email_template&quot;, emailTemplate);
	vars.put(&quot;forgot_password_with_email_config_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow forgot password with email config HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;forgot_password_config_id&quot;, id);
	JMeterUtils.setProperty(&quot;forgot_password_with_email_config_id&quot;, id);
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow forgot password with email config HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create workflow reset password config HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reset_password_config_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/reset_password</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_reset_password&quot;);
	payload.addProperty(&quot;process&quot;, &quot;reset_password&quot;);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
	//payload.addProperty(&quot;login_after_password_reset&quot;, &quot;false&quot;);
    	
	vars.put(&quot;reset_password_config_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow reset password config HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;reset_password_config_id&quot;, id);
	JMeterUtils.setProperty(&quot;reset_password_config_id&quot;, id);
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow reset password config HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create workflow member link config HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_link_config_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/link</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_link&quot;);
	payload.addProperty(&quot;process&quot;, &quot;link&quot;);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
	
	vars.put(&quot;member_link_config_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow member link config HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;member_link_config_id&quot;, id);
	JMeterUtils.setProperty(&quot;member_link_config_id&quot;, id);
	//log.info(&quot;member_link_config_id = &quot; + vars.get(&quot;member_link_config_id&quot;));
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow member link config HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.put (create) for wf forgot password with email HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_forgot_password_with_email_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	Random random = new Random();
	String[] status = { &quot;active&quot; };
     String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, &quot;active&quot;);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, vars.get(&quot;email_to&quot;));
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);

     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

     //log.info(&quot;payload.toString() = &quot; + payload.toString());
	
	vars.put(&quot;member_forgot_password_with_email_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;member.put (create) for wf forgot password with email HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create workflow member get config HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_get_config_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_get&quot;);
	payload.addProperty(&quot;process&quot;, &quot;get&quot;);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
	
	vars.put(&quot;member_get_config_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow member get config HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;member_get_config_id&quot;, id);
	JMeterUtils.setProperty(&quot;member_get_config_id&quot;, id);
	//log.info(&quot;member_get_config_id = &quot; + vars.get(&quot;member_get_config_id&quot;));
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;create workflow member get config HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${member_setup_max}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.put (create) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_setup_put_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/put?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	Random random = new Random();
	String[] status = { &quot;active&quot; };
     //Boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, &quot;active&quot;);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, true);
     //emailObj.addProperty(&quot;verified&quot;, false);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);

     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

     //log.info(&quot;payload.toString() = &quot; + payload.toString());
	
	vars.put(&quot;v1_member_setup_put_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;member setUp Thread Group&apos; -&gt; &apos;member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id and username
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	String username = jsonObj.get(&quot;username&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);
	//log.info(&quot;username = &quot; + username);

	//store member id/username in global vars
	String memberList = JMeterUtils.getProperty(&quot;v1_memberId_list&quot;);
	String usernameList = JMeterUtils.getProperty(&quot;v1_username_list&quot;);
	
	if(memberList.isEmpty() &amp;&amp; usernameList.isEmpty()){
		JMeterUtils.setProperty(&quot;v1_memberId_list&quot;, id);
		JMeterUtils.setProperty(&quot;v1_username_list&quot;, username);
	} else{
		JMeterUtils.setProperty(&quot;v1_memberId_list&quot;, memberList +&quot;,&quot;+ id);	
		JMeterUtils.setProperty(&quot;v1_username_list&quot;, usernameList + &quot;,&quot; + username);		
	}

	//log.info(&quot;Final memberId_list = &quot; + JMeterUtils.getProperty(&quot;memberId_list&quot;));
	//log.info(&quot;Final username_list = &quot; + JMeterUtils.getProperty(&quot;username_list&quot;));
	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;member setUp Thread Group&apos; -&gt; &apos;member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.put (create) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_setup_put_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	Random random = new Random();
	String[] status = { &quot;active&quot; };
     String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, &quot;active&quot;);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);

     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

     //log.info(&quot;payload.toString() = &quot; + payload.toString());
	
	vars.put(&quot;member_setup_put_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;member setUp Thread Group&apos; -&gt; &apos;member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id and username
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	String username = jsonObj.get(&quot;username&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);
	//log.info(&quot;username = &quot; + username);

	//store member id/username in global vars
	String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
	String usernameList = JMeterUtils.getProperty(&quot;username_list&quot;);
	
	if(memberList.isEmpty() &amp;&amp; usernameList.isEmpty()){
		JMeterUtils.setProperty(&quot;memberId_list&quot;, id);
		JMeterUtils.setProperty(&quot;username_list&quot;, username);
	} else{
		JMeterUtils.setProperty(&quot;memberId_list&quot;, memberList +&quot;,&quot;+ id);	
		JMeterUtils.setProperty(&quot;username_list&quot;, usernameList + &quot;,&quot; + username);		
	}

	//log.info(&quot;Final memberId_list = &quot; + JMeterUtils.getProperty(&quot;memberId_list&quot;));
	//log.info(&quot;Final username_list = &quot; + JMeterUtils.getProperty(&quot;username_list&quot;));
	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;member setUp Thread Group&apos; -&gt; &apos;member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow config.put (create) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_config_setup_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/${workflow_setup_config_process}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import java.util.Random;

try{

	Random random = new Random();
	String[] process = { &quot;registration&quot;, &quot;login&quot;, &quot;logout&quot;, &quot;delete&quot; }; 
	String processValue = process[random.nextInt(process.length)];
	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_&quot; + processValue);
	payload.addProperty(&quot;process&quot;, processValue);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
	
     //log.info(&quot;wordfilter_setup_create_payload = &quot; + payload.toString());
	vars.put(&quot;workflow_config_setup_create_payload&quot;, payload.toString());	
	//store process for other sampler usage
	vars.put(&quot;workflow_setup_config_process&quot;, processValue);	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow setUp Thread Group&apos; -&gt; &apos;workflow config.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id and username
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	String context = jsonObj.get(&quot;context&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	String process = jsonObj.get(&quot;process&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);
	//log.info(&quot;context = &quot; + context);

	//store workflow id/context in global vars
	String workflowList = JMeterUtils.getProperty(&quot;workflowId_list&quot;);
	String contextList = JMeterUtils.getProperty(&quot;workflowContext_list&quot;);
	String processList = JMeterUtils.getProperty(&quot;workflowProcess_list&quot;);
	
	if(workflowList.isEmpty() &amp;&amp; contextList.isEmpty() &amp;&amp; processList.isEmpty()){
		JMeterUtils.setProperty(&quot;workflowId_list&quot;, id);
		JMeterUtils.setProperty(&quot;workflowContext_list&quot;, context);
		JMeterUtils.setProperty(&quot;workflowProcess_list&quot;, process);
	} else{
		JMeterUtils.setProperty(&quot;workflowId_list&quot;, workflowList +&quot;,&quot;+ id);	
		JMeterUtils.setProperty(&quot;workflowContext_list&quot;, contextList + &quot;,&quot; + context);
		JMeterUtils.setProperty(&quot;workflowProcess_list&quot;, processList + &quot;,&quot; + process);		
	}
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;workflow setUp Thread Group&apos; -&gt; &apos;workflow.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="jp@gc - V1 Member Stepping Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">1000</stringProp>
        <stringProp name="Threads initial delay">15</stringProp>
        <stringProp name="Start users count">25</stringProp>
        <stringProp name="Start users count burst">25</stringProp>
        <stringProp name="Start users period">300</stringProp>
        <stringProp name="Stop users count">25</stringProp>
        <stringProp name="Stop users period">300</stringProp>
        <stringProp name="flighttime">86400</stringProp>
        <stringProp name="rampUp">15</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="User Variable Setter BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

String app_port = vars.get(&quot;port&quot;);
String proxy_host = vars.get(&quot;proxy_host&quot;);
String proxy_port = vars.get(&quot;proxy_port&quot;);

//log.info(&quot;app_port = &quot; + app_port);
//log.info(&quot;proxy_host = &quot; + proxy_host);
//log.info(&quot;proxy_port = &quot; + proxy_port);
//System.out.println(&quot;app_port = &quot; + app_port);
//System.out.println(&quot;proxy_host = &quot; + proxy_host);
//System.out.println(&quot;proxy_port = &quot; + proxy_port);

//make JMeter proxy variable. fields empty if not set via command args which will equate to 1
if(proxy_host.equals(&quot;1&quot;) || proxy_port.equals(&quot;1&quot;)){	
	vars.put(&quot;proxy_host&quot;, &quot;&quot;);
	vars.put(&quot;proxy_port&quot;, &quot;&quot;);	
	log.info(&quot;No proxy was used.&quot;);
}

if(app_port.equals(&quot;1&quot;)){	
	vars.put(&quot;port&quot;, &quot;&quot;);
	log.info(&quot;No application port was used.&quot;);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="v1 member.put (create) Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_put_create_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${v1_member_put_create_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.put (create) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_put_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/put?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{
 
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, true);
     //emailObj.addProperty(&quot;verified&quot;, false);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);
	
	// log.info(&quot;payload.toString() = &quot; + payload.toString());
	vars.put(&quot;v1_member_put_create_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;v1_member_put_create_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="v1 member.put (update) Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_put_update_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${v1_member_put_update_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.put (update) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_put_update_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/put?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import org.apache.jmeter.util.JMeterUtils;
import java.util.Random;

try{
 
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, true);
     //emailObj.addProperty(&quot;verified&quot;, false);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

     //get member id from global list if local scope is null 
	String memberId = vars.get(&quot;v1_member_put_create_id&quot;);
	//log.info(&quot;memberId = &quot; + memberId);
	if(memberId == null){
		String memberList = JMeterUtils.getProperty(&quot;v1_memberId_list&quot;);
		//log.info(&quot;memberList = &quot; + memberList);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		//log.info(&quot;memberIds = &quot; + memberIds);
		Random random = new Random();

		//add member id to payload
		payload.addProperty(&quot;_id&quot;, memberIds.get(random.nextInt(memberIds.size())));
	
	} else{
		payload.addProperty(&quot;_id&quot;, memberId);		
	}

	//log.info(&quot;payload.toString() = &quot; + payload.toString());
	vars.put(&quot;v1_member_put_update_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.put (update) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
/**
	//store response time
	String memberPutUpdateNinetiethPercentileList = JMeterUtils.getProperty(&quot;v1_member_put_update_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(memberPutUpdateNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;v1_member_put_update_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;v1_member_put_update_ninetieth_percentile_list&quot;, memberPutUpdateNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final memberPutUpdateNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_put_update_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_put_update_duration = &quot; + duration);	
	vars.put(&quot;v1_member_put_update_duration&quot;, String.valueOf(duration));
**/	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;v1_member_put_update_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="v1 member.get Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_get_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${v1_member_get_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.get HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_get_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/get?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;


try{

	//get member id from global list if local scope is null 
	String memberId = vars.get(&quot;v1_member_put_create_id&quot;);
	//log.info(&quot;memberId = &quot; + memberId);
	if(memberId == null){
		String memberList = JMeterUtils.getProperty(&quot;v1_memberId_list&quot;);
		//log.info(&quot;memberList = &quot; + memberList);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		//log.info(&quot;memberIds = &quot; + memberIds);
		Random random = new Random();
		vars.put(&quot;v1_member_get_id&quot;, memberIds.get(random.nextInt(memberIds.size())));
	} else{
		vars.put(&quot;v1_member_get_id&quot;, memberId);
	}

 	//log.info(&quot;vars.get(&apos;member_get_id&apos;) = &quot; + vars.get(&quot;member_get_id&quot;));	
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.get HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{
/**
	//store response time
	String memberGetNinetiethPercentileList = JMeterUtils.getProperty(&quot;v1_member_get_ninetieth_percentile_list&quot;);
	
	if(memberGetNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;v1_member_get_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
		JMeterUtils.setProperty(&quot;v1_member_get_ninetieth_percentile_list&quot;, memberGetNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}

	//log.info(&quot;Final memberGetNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_get_ninetieth_percentile_list&quot;));	
**/
	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_get_duration = &quot; + duration);	
	vars.put(&quot;v1_member_get_duration&quot;, String.valueOf(duration));
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;v1_member_get_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.get HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="jp@gc - Peak Throughput Shaping Timer" enabled="false">
            <collectionProp name="load_profile">
              <collectionProp name="1237490731">
                <stringProp name="51">3</stringProp>
                <stringProp name="51">3</stringProp>
                <stringProp name="-289938830">${duration}</stringProp>
              </collectionProp>
              <collectionProp name="84471532">
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
              </collectionProp>
            </collectionProp>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="v1 member.get with provider Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_get_with_provider_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${v1_member_get_with_provider_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.link_noverify HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_get_with_provider_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
                <elementProp name="provider" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_get_provider_name}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">provider</stringProp>
                </elementProp>
                <elementProp name="provider_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_get_provider_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">provider_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__evalVar(member_link_noverify)}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Member Id Getter" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;


try {

	// Get the member&apos;s &quot;_id&quot; value from the global list if the local scope is null.
	String memberId = vars.get(&quot;v1_member_get_id&quot;);
	if (memberId == null) {
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		Random random = new Random();
		vars.put(&quot;v1_member_get_with_provider_id&quot;, memberIds.get(random.nextInt(memberIds.size())));
	} 
	else {
		vars.put(&quot;v1_member_get_with_provider_id&quot;, memberId);
	}
     	
}
catch (Exception ex){
	
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.link Throughput Controller&apos; -&gt; &apos;member.link HTTP Request&apos; -&gt; &apos;Member Id Getter&apos;.\n&quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
    
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Provider Values Generator" enabled="true">
              <stringProp name="TestPlan.comments">This Beanshell script generates the &quot;provider_id&quot;, &quot;timestamp&quot;, and &quot;signature&quot; values to be used in a Member.LINK request.</stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.UUID;

try {

	// Get a random Unique ID value.
	String provider = &quot;sqe_no_verify_&quot; + UUID.randomUUID().toString().substring(0,9).toLowerCase();
	// Push the generated value into a Jmeter variable so that it can be used in the Member.LINK_NOVERIFY request.
	vars.put(&quot;v1_member_get_provider_name&quot;, provider);
	
	// Get a random Unique ID value.
	String provider_id = UUID.randomUUID().toString().toLowerCase();
	// Push the generated value into a Jmeter variable so that it can be used in the Member.LINK_NOVERIFY request.
	vars.put(&quot;v1_member_get_provider_id&quot;, provider_id);
     	
}
catch (Exception ex){
	
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.link Throughput Controller&apos; -&gt; &apos;member.link HTTP Request&apos; -&gt; &apos;Provider Values Generator&apos;.\n&quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
    
}</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="false">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <url>true</url>
                  <hostname>true</hostname>
                  <threadCounts>true</threadCounts>
                  <sampleCount>true</sampleCount>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <longProp name="interval_grouping">1000</longProp>
              <boolProp name="graph_aggregated">false</boolProp>
              <stringProp name="include_sample_labels"></stringProp>
              <stringProp name="exclude_sample_labels"></stringProp>
              <stringProp name="start_offset"></stringProp>
              <stringProp name="end_offset"></stringProp>
              <boolProp name="include_checkbox_state">false</boolProp>
              <boolProp name="exclude_checkbox_state">false</boolProp>
            </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
            <hashTree/>
            <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Transactions per Second" enabled="false">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <url>true</url>
                  <hostname>true</hostname>
                  <threadCounts>true</threadCounts>
                  <sampleCount>true</sampleCount>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <longProp name="interval_grouping">1000</longProp>
              <boolProp name="graph_aggregated">false</boolProp>
              <stringProp name="include_sample_labels"></stringProp>
              <stringProp name="exclude_sample_labels"></stringProp>
              <stringProp name="start_offset"></stringProp>
              <stringProp name="end_offset"></stringProp>
              <boolProp name="include_checkbox_state">false</boolProp>
              <boolProp name="exclude_checkbox_state">false</boolProp>
            </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
            <hashTree/>
            <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TimesVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times vs Threads" enabled="false">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <url>true</url>
                  <hostname>true</hostname>
                  <threadCounts>true</threadCounts>
                  <sampleCount>true</sampleCount>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <longProp name="interval_grouping">500</longProp>
              <boolProp name="graph_aggregated">false</boolProp>
              <stringProp name="include_sample_labels"></stringProp>
              <stringProp name="exclude_sample_labels"></stringProp>
              <stringProp name="start_offset"></stringProp>
              <stringProp name="end_offset"></stringProp>
              <boolProp name="include_checkbox_state">false</boolProp>
              <boolProp name="exclude_checkbox_state">false</boolProp>
            </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.get with provider HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_get_provider_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
                <elementProp name="provider" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_get_provider_name}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">provider</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/get?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;


try{

	//get member id from global list if local scope is null 
	String memberId = vars.get(&quot;v1_member_put_create_id&quot;);
	//log.info(&quot;memberId = &quot; + memberId);
	if(memberId == null){
		String memberList = JMeterUtils.getProperty(&quot;v1_memberId_list&quot;);
		//log.info(&quot;memberList = &quot; + memberList);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		//log.info(&quot;memberIds = &quot; + memberIds);
		Random random = new Random();
		vars.put(&quot;v1_member_get_id&quot;, memberIds.get(random.nextInt(memberIds.size())));
	} else{
		vars.put(&quot;v1_member_get_id&quot;, memberId);
	}

 	//log.info(&quot;vars.get(&apos;member_get_id&apos;) = &quot; + vars.get(&quot;member_get_id&quot;));	
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.get HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{
/**
	//store response time
	String memberGetWithProviderNinetiethPercentileList = JMeterUtils.getProperty(&quot;v1_member_get_with_provider_ninetieth_percentile_list&quot;);
	
	if(memberGetWithProviderNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;v1_member_get_with_provider_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
		JMeterUtils.setProperty(&quot;v1_member_get_with_provider_ninetieth_percentile_list&quot;, memberGetWithProviderNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}

	//log.info(&quot;Final memberGetWithProviderNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_get_with_provider_ninetieth_percentile_list&quot;));	
**/
	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_get_duration = &quot; + duration);	
	vars.put(&quot;v1_member_get_with_provider_duration&quot;, String.valueOf(duration));
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;v1_member_get_with_provider_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.get with provider HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="jp@gc - Peak Throughput Shaping Timer" enabled="false">
            <collectionProp name="load_profile">
              <collectionProp name="1237490731">
                <stringProp name="51">3</stringProp>
                <stringProp name="51">3</stringProp>
                <stringProp name="-289938830">${duration}</stringProp>
              </collectionProp>
              <collectionProp name="84471532">
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
              </collectionProp>
            </collectionProp>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="v1 member.login Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_login_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${v1_member_login_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.put (login) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_put_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/put?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{
 
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, true);
     //emailObj.addProperty(&quot;verified&quot;, false);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);
	
	// log.info(&quot;payload.toString() = &quot; + payload.toString());
	vars.put(&quot;v1_member_put_create_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;v1_member_get_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.login HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_login_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_setup_pwd}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/login?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

try{
	//get member id from global list if local scope is null 
	String memberId = vars.get(&quot;v1_member_get_id&quot;);
	//log.info(&quot;memberId = &quot; + memberId);
	if(memberId == null){
		String memberList = JMeterUtils.getProperty(&quot;v1_memberId_list&quot;);
		//log.info(&quot;memberList = &quot; + memberList);
		String usernameList = JMeterUtils.getProperty(&quot;v1_username_list&quot;);
		//log.info(&quot;usernameList = &quot; + usernameList);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		//log.info(&quot;memberIds = &quot; + memberIds);
		List usernames = new ArrayList(Arrays.asList(usernameList.split(&quot;,&quot;)));
		//log.info(&quot;usernames = &quot; + usernames);
		Random random = new Random();
		vars.put(&quot;v1_member_login_id&quot;, memberIds.get(random.nextInt(memberIds.size())));   
		vars.put(&quot;v1_member_login_username&quot;, usernames.get(random.nextInt(usernames.size())));     	
	} else{
		vars.put(&quot;v1_member_login_id&quot;, memberId);   		
	}
 
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.login HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{
/**
	//store response time
	String memberLoginNinetiethPercentileList = JMeterUtils.getProperty(&quot;v1_member_login_ninetieth_percentile_list&quot;);
	
	if(memberLoginNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;v1_member_login_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
		JMeterUtils.setProperty(&quot;v1_member_login_ninetieth_percentile_list&quot;, memberLoginNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}

	//log.info(&quot;Final memberLoginNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_login_ninetieth_percentile_list&quot;));	
**/
	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_login_duration = &quot; + duration);	
	vars.put(&quot;v1_member_login_duration&quot;, String.valueOf(duration));
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;v1_member_login_id&quot;, id);	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.login HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="jp@gc - Peak Throughput Shaping Timer" enabled="false">
            <collectionProp name="load_profile">
              <collectionProp name="1237490731">
                <stringProp name="51">3</stringProp>
                <stringProp name="51">3</stringProp>
                <stringProp name="-289938830">${duration}</stringProp>
              </collectionProp>
              <collectionProp name="84471532">
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
              </collectionProp>
            </collectionProp>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="v1 member.logout Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_logout_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${v1_member_logout_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.put (logout) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_put_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/put?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{
 
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, true);
     //emailObj.addProperty(&quot;verified&quot;, false);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);
	
	// log.info(&quot;payload.toString() = &quot; + payload.toString());
	vars.put(&quot;v1_member_put_create_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;v1_member_get_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 logout member.login HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_login_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_setup_pwd}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/login?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

try{
	//get member id from global list if local scope is null 
	String memberId = vars.get(&quot;v1_member_get_id&quot;);
	//log.info(&quot;memberId = &quot; + memberId);
	if(memberId == null){
		String memberList = JMeterUtils.getProperty(&quot;v1_memberId_list&quot;);
		//log.info(&quot;memberList = &quot; + memberList);
		//String usernameList = JMeterUtils.getProperty(&quot;username_list&quot;);
		//log.info(&quot;usernameList = &quot; + usernameList);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		//log.info(&quot;memberIds = &quot; + memberIds);
		//List usernames = new ArrayList(Arrays.asList(usernameList.split(&quot;,&quot;)));
		//log.info(&quot;usernames = &quot; + usernames);
		Random random = new Random();
		vars.put(&quot;v1_member_login_id&quot;, memberIds.get(random.nextInt(memberIds.size())));   
		//vars.put(&quot;member_login_username&quot;, usernames.get(random.nextInt(usernames.size())));     	
	} else{
		vars.put(&quot;v1_member_login_id&quot;, memberId);   		
	}
 
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.logout Throughput Controller&apos; -&gt; &apos;v1_member.login HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_logout_duration = &quot; + duration);	
	vars.put(&quot;v1_member_logout_duration&quot;, String.valueOf(duration));
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;v1_member_logout_login_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.logout Throughput Controller&apos; -&gt; &apos;v1_member.login HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.logout HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_logout_login_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/logout?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
/**
	//store response time
	String memberLogoutNinetiethPercentileList = JMeterUtils.getProperty(&quot;v1_member_logout_ninetieth_percentile_list&quot;);
	
	if(memberLogoutNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;v1_member_logout_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
		JMeterUtils.setProperty(&quot;v1_member_logout_ninetieth_percentile_list&quot;, memberLogoutNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}
**/
	//log.info(&quot;Final memberLogoutNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_logout_ninetieth_percentile_list&quot;));	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;v1_member_logout_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.logout Throughput Controller&apos; -&gt; &apos;v1_member.logout HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <sampleCount>true</sampleCount>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <longProp name="interval_grouping">1000</longProp>
              <boolProp name="graph_aggregated">false</boolProp>
              <stringProp name="include_sample_labels"></stringProp>
              <stringProp name="exclude_sample_labels"></stringProp>
              <stringProp name="start_offset"></stringProp>
              <stringProp name="end_offset"></stringProp>
              <boolProp name="include_checkbox_state">false</boolProp>
              <boolProp name="exclude_checkbox_state">false</boolProp>
            </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
            <hashTree/>
            <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Transactions per Second" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <sampleCount>true</sampleCount>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <longProp name="interval_grouping">1000</longProp>
              <boolProp name="graph_aggregated">false</boolProp>
              <stringProp name="include_sample_labels"></stringProp>
              <stringProp name="exclude_sample_labels"></stringProp>
              <stringProp name="start_offset"></stringProp>
              <stringProp name="end_offset"></stringProp>
              <boolProp name="include_checkbox_state">false</boolProp>
              <boolProp name="exclude_checkbox_state">false</boolProp>
            </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
            <hashTree/>
            <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TimesVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times vs Threads" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <sampleCount>true</sampleCount>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <longProp name="interval_grouping">500</longProp>
              <boolProp name="graph_aggregated">false</boolProp>
              <stringProp name="include_sample_labels"></stringProp>
              <stringProp name="exclude_sample_labels"></stringProp>
              <stringProp name="start_offset"></stringProp>
              <stringProp name="end_offset"></stringProp>
              <boolProp name="include_checkbox_state">false</boolProp>
              <boolProp name="exclude_checkbox_state">false</boolProp>
            </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="jp@gc - Peak Throughput Shaping Timer" enabled="false">
            <collectionProp name="load_profile">
              <collectionProp name="1237603819">
                <stringProp name="54">6</stringProp>
                <stringProp name="54">6</stringProp>
                <stringProp name="-289938830">${duration}</stringProp>
              </collectionProp>
              <collectionProp name="84471532">
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
              </collectionProp>
            </collectionProp>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="v1 member.remove Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_remove_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${v1_member_remove_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 remove member.put (create) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_put_remove_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/put?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{
 
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, true);
     //emailObj.addProperty(&quot;verified&quot;, false);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, &quot;password&quot;);

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

	vars.put(&quot;v1_member_put_remove_create_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.remove Throughput Controller&apos; -&gt;  &apos;v1_member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//log.info(&quot;Final memberRemoveNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_remove_ninetieth_percentile_list&quot;));	

	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;v1_member_put_remove_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.remove Throughput Controller&apos; -&gt; &apos;v1_member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.remove HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_put_remove_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/remove?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

try{

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_remove_duration = &quot; + duration);	
	vars.put(&quot;v1_member_remove_duration&quot;, String.valueOf(duration));
/**
	//store response time
	String memberRemoveNinetiethPercentileList = JMeterUtils.getProperty(&quot;v1_member_remove_ninetieth_percentile_list&quot;);
	
	if(memberRemoveNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;v1_member_remove_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
		JMeterUtils.setProperty(&quot;v1_member_remove_ninetieth_percentile_list&quot;, memberRemoveNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}

	//log.info(&quot;Final memberRemoveNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_remove_ninetieth_percentile_list&quot;));	
**/	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.remove HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="jp@gc - Peak Throughput Shaping Timer" enabled="false">
            <collectionProp name="load_profile">
              <collectionProp name="1237603819">
                <stringProp name="54">6</stringProp>
                <stringProp name="54">6</stringProp>
                <stringProp name="-289938830">${duration}</stringProp>
              </collectionProp>
              <collectionProp name="84471532">
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
              </collectionProp>
            </collectionProp>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="v1 member.link Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_link_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${v1_member_link_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.link HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_link_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
                <elementProp name="provider" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_hmac_provider_name}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">provider</stringProp>
                </elementProp>
                <elementProp name="provider_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_hmac_provider_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">provider_id</stringProp>
                </elementProp>
                <elementProp name="site_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${site_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">site_id</stringProp>
                </elementProp>
                <elementProp name="timestamp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_hmac_timestamp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">timestamp</stringProp>
                </elementProp>
                <elementProp name="signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_signature}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">signature</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__evalVar(member_link)}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Member Id Getter" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;


try {

	// Get the member&apos;s &quot;_id&quot; value from the global list if the local scope is null.
	String memberId = vars.get(&quot;v1_member_get_id&quot;);
	if (memberId == null) {
		String memberList = JMeterUtils.getProperty(&quot;v1_memberId_list&quot;);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		Random random = new Random();
		vars.put(&quot;v1_member_link_id&quot;, memberIds.get(random.nextInt(memberIds.size())));
	} 
	else {
		vars.put(&quot;v1_member_link_id&quot;, memberId);
	}
     	
}
catch (Exception ex){
	
    log.error(&quot;Error in &apos;Member API Stepping Thread Group&apos; -&gt; &apos;v1_Member.LINK Throughput Controller&apos; -&gt; &apos;v1_Member.LINK HTTP Request&apos; -&gt; &apos;Member Id Getter&apos;&quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
    
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Provider and HMAC Values Generator" enabled="true">
              <stringProp name="TestPlan.comments">This Beanshell script generates the &quot;provider_id&quot;, &quot;timestamp&quot;, and &quot;signature&quot; values to be used in a Member.LINK request.</stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Hex;

/**
 * &lt;p&gt;
 * This beanshell script generates a unique HMAC signature, and makes it a part of the script&apos;s environment variable. It also does the same for
 * &quot;site_id&quot;, &quot;timestamp&quot;, &quot;provider_id&quot;, and &quot;secret_key&quot;.
 * 
 * &lt;p&gt;&lt;b&gt;Engineer:&lt;/b&gt;&lt;/p&gt; 
 * &lt;p&gt;Mirza S. Baig&lt;/p&gt;
 * 
 * &lt;p&gt;&lt;b&gt;Date of Completion:&lt;/b&gt;&lt;/p&gt;
 * &lt;p&gt;07-13-2015&lt;/p&gt;
 * 
 */

//Scripted object to generate unique &quot;provider_id&quot; request parameter values.
generateProviderID() {
	//Get a random Unique ID value.
	String provider_id = UUID.randomUUID().toString();
	//Push the generated value into a Jmeter variable so that it can be used in the Member.link and Member.unlink requests.
	vars.put(&quot;v1_hmac_provider_id&quot;, provider_id);
	//Return the generated value.
	return provider_id;
}

//Scripted object to generate the &quot;timestamp&quot; request parameter values.
generateTimestamp() {
	//Get the current Unix timestamp.
	String unixTimestamp = Long.toString(System.currentTimeMillis() / 1000L);
	//Push the generated value into a Jmeter variable so that it can be used in the Member.link request.
	vars.put(&quot;v1_hmac_timestamp&quot;, unixTimestamp);
	//Return the timestamp.
	return unixTimestamp;
}

//Scripted object to calculate the HMAC signature value.
getHMACsignature() {
	//Get a random Unique ID value.
	String provider = &quot;sqe_provider_&quot; + UUID.randomUUID().toString().substring(0,6).toLowerCase();
	//Push the generated value into a Jmeter variable so that it can be used in the Member.link_noverify request.
	vars.put(&quot;v1_hmac_provider_name&quot;, provider);
	//Initialize the final HMAC value.
	String hmac = &quot;&quot;;
	//Put all the pre-requisite values in the current run.
	generateProviderID();
	generateTimestamp();
	//Create a data vector by concatenating the brand id, site id, provider name, provider id, and the timestamp.
	String vector = vars.get(&quot;brand_id&quot;) + &quot;,&quot; + vars.get(&quot;site_id&quot;) + &quot;,&quot; + vars.get(&quot;v1_hmac_provider_name&quot;) + &quot;,&quot; + vars.get(&quot;v1_hmac_provider_id&quot;) 
				+ &quot;,&quot; + vars.get(&quot;v1_hmac_timestamp&quot;);
	//Construct an HMAC SHA-1 secret key specification from the &quot;secret_key&quot; parameter&apos;s byte array.
	SecretKeySpec secretKeyIDX = new SecretKeySpec(vars.get(&quot;secret_key&quot;).getBytes(), &quot;HmacSHA1&quot;);
	//Get a Mac object that implements the HMAC SHA-1 algorithm.
	Mac oMac = Mac.getInstance(&quot;HmacSHA1&quot;);
	//Initialize the Mac object with the secret key.
	oMac.init(secretKeyIDX);
	//Calculate the HMAC using the vector&apos;s data bytes, and finish the MAC operation.
	byte[] hmacBytes = oMac.doFinal(vector.getBytes());
	//Encode the HMAC data bytes into bytes for the characters representing hex values/byte in precise order.
	byte[] hexBytes = new Hex().encode(hmacBytes);
	//Store the calculated HMAC signature value.
	hmac =  new String(hexBytes, &quot;UTF-8&quot;);
	//Push the &quot;signature&quot; value into a Jmeter environment variable so that it can be used to make Member.LINK requests.
	vars.put(&quot;v1_signature&quot;, hmac);
	//Return the signature.
	return hmac;
}

try {
	
	//Get the HMAC signature.
	String sig = getHMACsignature();
	
}
catch (NoSuchAlgorithmException e) {
	
	log.error(&quot;Unknown algorithm used. Please check the getHMACsignature method.&quot;);
	
} 
catch (InvalidKeyException e) {
	
	log.error(&quot;Unknown secret key specification used. Please check the getHMACsignature method.&quot;);
	
} 
catch (UnsupportedEncodingException e) {
	
	log.error(&quot;An exception was raised due to encoding issues of the HMAC data bytes. Please check the getHMACsignature method.&quot;);
	
} 
catch (Exception ex){
	
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.link Throughput Controller&apos; -&gt; &apos;v1_member.link HTTP Request&apos; -&gt; &apos;Provider and HMAC Values Generator&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
    
}</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Member Id Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-865215429">&quot;_id&quot;:&quot;${v1_member_link_id}&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Time Storage" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.concurrent.TimeUnit;

try {

	// Store the response time.
	String memberLinkNinetiethPercentileList = JMeterUtils.getProperty(&quot;v1_member_link_ninetieth_percentile_list&quot;);
	long duration = prev.getTime();
		
	if(memberLinkNinetiethPercentileList.isEmpty()) {
		JMeterUtils.setProperty(&quot;v1_member_link_ninetieth_percentile_list&quot;, String.valueOf(duration));	
	} 
	else {
		JMeterUtils.setProperty(&quot;v1_member_link_ninetieth_percentile_list&quot;, memberLinkNinetiethPercentileList + &quot;,&quot; + String.valueOf(duration));
	}
	
}
catch (Exception ex) {

    	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.link Throughput Controller&apos; -&gt; &apos;v1_member.link HTTP Request&apos; -&gt; &apos;Response Time Storage&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
	
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="false">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <url>true</url>
                  <hostname>true</hostname>
                  <threadCounts>true</threadCounts>
                  <sampleCount>true</sampleCount>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <longProp name="interval_grouping">1000</longProp>
              <boolProp name="graph_aggregated">false</boolProp>
              <stringProp name="include_sample_labels"></stringProp>
              <stringProp name="exclude_sample_labels"></stringProp>
              <stringProp name="start_offset"></stringProp>
              <stringProp name="end_offset"></stringProp>
              <boolProp name="include_checkbox_state">false</boolProp>
              <boolProp name="exclude_checkbox_state">false</boolProp>
            </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
            <hashTree/>
            <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Transactions per Second" enabled="false">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <url>true</url>
                  <hostname>true</hostname>
                  <threadCounts>true</threadCounts>
                  <sampleCount>true</sampleCount>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <longProp name="interval_grouping">1000</longProp>
              <boolProp name="graph_aggregated">false</boolProp>
              <stringProp name="include_sample_labels"></stringProp>
              <stringProp name="exclude_sample_labels"></stringProp>
              <stringProp name="start_offset"></stringProp>
              <stringProp name="end_offset"></stringProp>
              <boolProp name="include_checkbox_state">false</boolProp>
              <boolProp name="exclude_checkbox_state">false</boolProp>
            </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
            <hashTree/>
            <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TimesVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times vs Threads" enabled="false">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <url>true</url>
                  <hostname>true</hostname>
                  <threadCounts>true</threadCounts>
                  <sampleCount>true</sampleCount>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <longProp name="interval_grouping">500</longProp>
              <boolProp name="graph_aggregated">false</boolProp>
              <stringProp name="include_sample_labels"></stringProp>
              <stringProp name="exclude_sample_labels"></stringProp>
              <stringProp name="start_offset"></stringProp>
              <stringProp name="end_offset"></stringProp>
              <boolProp name="include_checkbox_state">false</boolProp>
              <boolProp name="exclude_checkbox_state">false</boolProp>
            </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="jp@gc - Peak Throughput Shaping Timer" enabled="false">
            <collectionProp name="load_profile">
              <collectionProp name="1237490731">
                <stringProp name="51">3</stringProp>
                <stringProp name="51">3</stringProp>
                <stringProp name="-289938830">${duration}</stringProp>
              </collectionProp>
              <collectionProp name="84471532">
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
              </collectionProp>
            </collectionProp>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="v1 member.link_noverify Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_link_noverify_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${v1_member_link_noverify_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.link_noverify HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_link_noverify_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
                <elementProp name="provider" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_provider_name}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">provider</stringProp>
                </elementProp>
                <elementProp name="provider_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_provider_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">provider_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__evalVar(member_link_noverify)}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Member Id Getter" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;


try {

	// Get the member&apos;s &quot;_id&quot; value from the global list if the local scope is null.
	String memberId = vars.get(&quot;v1_member_get_id&quot;);
	if (memberId == null) {
		String memberList = JMeterUtils.getProperty(&quot;v1_memberId_list&quot;);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		Random random = new Random();
		vars.put(&quot;v1_member_link_noverify_id&quot;, memberIds.get(random.nextInt(memberIds.size())));
	} 
	else {
		vars.put(&quot;v1_member_link_noverify_id&quot;, memberId);
	}
     	
}
catch (Exception ex){
	
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.link Throughput Controller&apos; -&gt; &apos;v1_member.link HTTP Request&apos; -&gt; &apos;Member Id Getter&apos;.\n&quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
    
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Provider Values Generator" enabled="true">
              <stringProp name="TestPlan.comments">This Beanshell script generates the &quot;provider_id&quot;, &quot;timestamp&quot;, and &quot;signature&quot; values to be used in a Member.LINK request.</stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.UUID;

try {

	// Get a random Unique ID value.
	String provider = &quot;sqe_no_verify_&quot; + UUID.randomUUID().toString().substring(0,9).toLowerCase();
	// Push the generated value into a Jmeter variable so that it can be used in the Member.LINK_NOVERIFY request.
	vars.put(&quot;v1_provider_name&quot;, provider);
	
	// Get a random Unique ID value.
	String provider_id = UUID.randomUUID().toString().toLowerCase();
	// Push the generated value into a Jmeter variable so that it can be used in the Member.LINK_NOVERIFY request.
	vars.put(&quot;v1_provider_id&quot;, provider_id);
     	
}
catch (Exception ex){
	
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.link Throughput Controller&apos; -&gt; &apos;v1_member.link HTTP Request&apos; -&gt; &apos;Provider Values Generator&apos;.\n&quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
    
}</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Member Id Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1409910518">&quot;_id&quot;:&quot;${v1_member_link_noverify_id}&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Time Storage" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.concurrent.TimeUnit;

try {

	// Store the response time.
	String memberLinkNoverifyNinetiethPercentileList = JMeterUtils.getProperty(&quot;v1_member_link_noverify_ninetieth_percentile_list&quot;);
	long duration = prev.getTime();
		
	if(memberLinkNoverifyNinetiethPercentileList.isEmpty()) {
		JMeterUtils.setProperty(&quot;v1_member_link_noverify_ninetieth_percentile_list&quot;, String.valueOf(duration));		
	} 
	else {
		JMeterUtils.setProperty(&quot;v1_member_link_noverify_ninetieth_percentile_list&quot;, memberLinkNoverifyNinetiethPercentileList +&quot;,&quot;+ String.valueOf(duration));
	}
	
}
catch (Exception ex) {

    	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.link_noverify Throughput Controller&apos; -&gt; &apos;v1_member.link_noverify HTTP Request&apos; -&gt; &apos;Response Time Storage&apos;.\n&quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
	
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="false">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <url>true</url>
                  <hostname>true</hostname>
                  <threadCounts>true</threadCounts>
                  <sampleCount>true</sampleCount>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <longProp name="interval_grouping">1000</longProp>
              <boolProp name="graph_aggregated">false</boolProp>
              <stringProp name="include_sample_labels"></stringProp>
              <stringProp name="exclude_sample_labels"></stringProp>
              <stringProp name="start_offset"></stringProp>
              <stringProp name="end_offset"></stringProp>
              <boolProp name="include_checkbox_state">false</boolProp>
              <boolProp name="exclude_checkbox_state">false</boolProp>
            </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
            <hashTree/>
            <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Transactions per Second" enabled="false">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <url>true</url>
                  <hostname>true</hostname>
                  <threadCounts>true</threadCounts>
                  <sampleCount>true</sampleCount>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <longProp name="interval_grouping">1000</longProp>
              <boolProp name="graph_aggregated">false</boolProp>
              <stringProp name="include_sample_labels"></stringProp>
              <stringProp name="exclude_sample_labels"></stringProp>
              <stringProp name="start_offset"></stringProp>
              <stringProp name="end_offset"></stringProp>
              <boolProp name="include_checkbox_state">false</boolProp>
              <boolProp name="exclude_checkbox_state">false</boolProp>
            </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
            <hashTree/>
            <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TimesVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times vs Threads" enabled="false">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <url>true</url>
                  <hostname>true</hostname>
                  <threadCounts>true</threadCounts>
                  <sampleCount>true</sampleCount>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <longProp name="interval_grouping">500</longProp>
              <boolProp name="graph_aggregated">false</boolProp>
              <stringProp name="include_sample_labels"></stringProp>
              <stringProp name="exclude_sample_labels"></stringProp>
              <stringProp name="start_offset"></stringProp>
              <stringProp name="end_offset"></stringProp>
              <boolProp name="include_checkbox_state">false</boolProp>
              <boolProp name="exclude_checkbox_state">false</boolProp>
            </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="jp@gc - Peak Throughput Shaping Timer" enabled="false">
            <collectionProp name="load_profile">
              <collectionProp name="1237490731">
                <stringProp name="51">3</stringProp>
                <stringProp name="51">3</stringProp>
                <stringProp name="-289938830">${duration}</stringProp>
              </collectionProp>
              <collectionProp name="84471532">
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
              </collectionProp>
            </collectionProp>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="v1 member.unlink Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_unlink_noverify_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${v1_member_unlink_noverify_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 unlink member.put (create) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_unlink_member_put_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/put?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{
 
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, bool[random.nextInt(bool.length)]);
     //emailObj.addProperty(&quot;verified&quot;, bool[random.nextInt(bool.length)]);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, &quot;password&quot;);

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, bool[random.nextInt(bool.length)]);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, bool[random.nextInt(bool.length)]);
     //phoneObj.addProperty(&quot;mobile&quot;, bool[random.nextInt(bool.length)]);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

	vars.put(&quot;v1_unlink_member_put_create_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id and username
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	String username = jsonObj.get(&quot;username&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);
	//log.info(&quot;username = &quot; + username);

	//store id for other sampler usage
	vars.put(&quot;v1_unlink_member_put_create_id&quot;, id);	
	vars.put(&quot;v1_unlink_member_put_create_username&quot;, username);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.link_noverify for member.unlink HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_unlink_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
                <elementProp name="provider" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_unlink_provider}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">provider</stringProp>
                </elementProp>
                <elementProp name="provider_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_unlink_provider_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">provider_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__evalVar(member_link_noverify)}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Member Id Getter" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.UUID;

try {

	// Get a member&apos;s &quot;_id&quot; value from the global list if the local scope is null.
	String memberId = vars.get(&quot;v1_unlink_member_put_create_id&quot;);
	if (memberId == null) {
		String memberList = JMeterUtils.getProperty(&quot;v1_memberId_list&quot;);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		Random random = new Random();
		vars.put(&quot;v1_member_unlink_id&quot;, memberIds.get(random.nextInt(memberIds.size())));
	} 
	else {
		vars.put(&quot;v1_member_unlink_id&quot;, memberId);
	}

		// Get a random Unique ID value.
	String provider = &quot;sqe_unlink_&quot; + UUID.randomUUID().toString().substring(0,10).toLowerCase();
	// Push the generated value into a Jmeter variable so that it can be used in the Member.LINK_NOVERIFY and Member.UNLINK requests.
	vars.put(&quot;v1_member_unlink_provider&quot;, provider);
	
	// Get a random Unique ID value.
	String provider_id = UUID.randomUUID().toString().toLowerCase();
	// Push the generated value into a Jmeter variable so that it can be used in the Member.LINK_NOVERIFY and Member.UNLINK requests.
	vars.put(&quot;v1_member_unlink_provider_id&quot;, provider_id);
     	
}
catch (Exception ex){
	
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.unlink Throughput Controller&apos; -&gt; &apos;v1_member.link_noverify for v1_member.unlink HTTP Request&apos; -&gt; &apos;Member Id Getter&apos;.\n&quot;);
    throw ex;
    
}</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Provider Values Generator" enabled="false">
              <stringProp name="TestPlan.comments">This Beanshell script generates the &quot;provider_id&quot;, &quot;timestamp&quot;, and &quot;signature&quot; values to be used in a Member.LINK request.</stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.UUID;

try {

	// Get a random Unique ID value.
	String provider = &quot;sqe_unlink_&quot; + UUID.randomUUID().toString().substring(0,10).toLowerCase();
	// Push the generated value into a Jmeter variable so that it can be used in the Member.LINK_NOVERIFY and Member.UNLINK requests.
	vars.put(&quot;v1_member_unlink_provider&quot;, provider);
	
	// Get a random Unique ID value.
	String provider_id = UUID.randomUUID().toString().toLowerCase();
	// Push the generated value into a Jmeter variable so that it can be used in the Member.LINK_NOVERIFY and Member.UNLINK requests.
	vars.put(&quot;v1_member_unlink_provider_id&quot;, provider_id);
     	
}
catch (Exception ex){
	
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.link Throughput Controller&apos; -&gt; &apos;v1_member.link_noverify for member.unlink HTTP Request&apos; -&gt; &apos;Provider Values Generator&apos;.\n&quot;);
    throw ex; //
    
}</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.unlink HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_unlink_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
                <elementProp name="provider" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_unlink_provider}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">provider</stringProp>
                </elementProp>
                <elementProp name="provider_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_unlink_provider_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">provider_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__evalVar(member_unlink)}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Member Id Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1909545918">&quot;_id&quot;:&quot;${v1_member_unlink_id}&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Time Storage" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

try {

	// Store the response time.
	String memberUnlinkNinetiethPercentileList = JMeterUtils.getProperty(&quot;v1_member_unlink_ninetieth_percentile_list&quot;);
	String responseTime = String.valueOf(prev.getTime());
		
	if(memberUnlinkNinetiethPercentileList.isEmpty()) {
		JMeterUtils.setProperty(&quot;v1_member_unlink_ninetieth_percentile_list&quot;, responseTime);	
	} 
	else {
		JMeterUtils.setProperty(&quot;v1_member_unlink_ninetieth_percentile_list&quot;, memberUnlinkNinetiethPercentileList + &quot;,&quot; + responseTime);
	}
	
}
catch (Exception ex) {

    	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.unlink Throughput Controller&apos; -&gt; &apos;v1_member.unlink HTTP Request&apos; -&gt; &apos;Response Time Storage&apos; &quot;);
	throw ex;
	
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="v1 member.delete Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_delete_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${v1_member_delete_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 delete member.put (create) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_put_delete_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/put?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{
 
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, true);
     //emailObj.addProperty(&quot;verified&quot;, false);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, &quot;password&quot;);

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

	vars.put(&quot;v1_member_put_delete_create_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.delete Throughput Controller&apos; -&gt;  &apos;v1_member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//log.info(&quot;Final memberDeleteNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_delete_ninetieth_percentile_list&quot;));	

	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;v1_member_put_delete_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.delete Throughput Controller&apos; -&gt; &apos;v1_member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.delete HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_put_delete_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/delete?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

try{

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_delete_duration = &quot; + duration);	
	vars.put(&quot;v1_member_delete_duration&quot;, String.valueOf(duration));
/**
	//store response time
	String memberDeleteNinetiethPercentileList = JMeterUtils.getProperty(&quot;v1_member_delete_ninetieth_percentile_list&quot;);
	
	if(memberDeleteNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;v1_member_delete_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
		JMeterUtils.setProperty(&quot;v1_member_delete_ninetieth_percentile_list&quot;, memberDeleteNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}

	//log.info(&quot;Final memberDeleteNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_delete_ninetieth_percentile_list&quot;));	
**/	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.delete HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="jp@gc - Peak Throughput Shaping Timer" enabled="false">
            <collectionProp name="load_profile">
              <collectionProp name="1237603819">
                <stringProp name="54">6</stringProp>
                <stringProp name="54">6</stringProp>
                <stringProp name="-289938830">${duration}</stringProp>
              </collectionProp>
              <collectionProp name="84471532">
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
              </collectionProp>
            </collectionProp>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="v1 member.undelete Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_undelete_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${v1_member_undelete_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 undelete member.put (create) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_put_undelete_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/put?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{
 
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, true);
     //emailObj.addProperty(&quot;verified&quot;, false);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, &quot;password&quot;);

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

	vars.put(&quot;v1_member_put_undelete_create_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.undelete Throughput Controller&apos; -&gt;  &apos;v1_member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//log.info(&quot;Final memberUndeleteNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_undelete_ninetieth_percentile_list&quot;));	

	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;v1_member_put_undelete_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.undelete Throughput Controller&apos; -&gt; &apos;v1_member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 undelete member.delete HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_put_undelete_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/delete?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v1 member.undelete HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${v1_member_put_undelete_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/member/undelete?API_KEY=${api_key}&amp;BRAND_ID=${brand_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

try{

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_undelete_duration = &quot; + duration);	
	vars.put(&quot;v1_member_undelete_duration&quot;, String.valueOf(duration));
/**
	//store response time
	String memberUndeleteNinetiethPercentileList = JMeterUtils.getProperty(&quot;v1_member_undelete_ninetieth_percentile_list&quot;);
	
	if(memberUndeleteNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;v1_member_undelete_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
		JMeterUtils.setProperty(&quot;v1_member_undelete_ninetieth_percentile_list&quot;, memberUndeleteNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}

	//log.info(&quot;Final memberUndeleteNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_undelete_ninetieth_percentile_list&quot;));	
**/	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;v1_member.undelete HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="jp@gc - Peak Throughput Shaping Timer" enabled="false">
            <collectionProp name="load_profile">
              <collectionProp name="1237603819">
                <stringProp name="54">6</stringProp>
                <stringProp name="54">6</stringProp>
                <stringProp name="-289938830">${duration}</stringProp>
              </collectionProp>
              <collectionProp name="84471532">
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
              </collectionProp>
            </collectionProp>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Peak Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="jp@gc - V2 Member Stepping Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">1000</stringProp>
        <stringProp name="Threads initial delay">15</stringProp>
        <stringProp name="Start users count">25</stringProp>
        <stringProp name="Start users count burst">25</stringProp>
        <stringProp name="Start users period">300</stringProp>
        <stringProp name="Stop users count">25</stringProp>
        <stringProp name="Stop users period">300</stringProp>
        <stringProp name="flighttime">86400</stringProp>
        <stringProp name="rampUp">15</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="User Variable Setter BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

String app_port = vars.get(&quot;port&quot;);
String proxy_host = vars.get(&quot;proxy_host&quot;);
String proxy_port = vars.get(&quot;proxy_port&quot;);

//log.info(&quot;app_port = &quot; + app_port);
//log.info(&quot;proxy_host = &quot; + proxy_host);
//log.info(&quot;proxy_port = &quot; + proxy_port);
//System.out.println(&quot;app_port = &quot; + app_port);
//System.out.println(&quot;proxy_host = &quot; + proxy_host);
//System.out.println(&quot;proxy_port = &quot; + proxy_port);

//make JMeter proxy variable. fields empty if not set via command args which will equate to 1
if(proxy_host.equals(&quot;1&quot;) || proxy_port.equals(&quot;1&quot;)){	
	vars.put(&quot;proxy_host&quot;, &quot;&quot;);
	vars.put(&quot;proxy_port&quot;, &quot;&quot;);	
	log.info(&quot;No proxy was used.&quot;);
}

if(app_port.equals(&quot;1&quot;)){	
	vars.put(&quot;port&quot;, &quot;&quot;);
	log.info(&quot;No application port was used.&quot;);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="member.put (create) Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_put_create_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_put_create_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.put (create) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_put_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{

 	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;)); 
	//log.info(&quot;client_token_id = &quot; + JMeterUtils.getProperty(&quot;client_token_id&quot;));
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, true);
     //emailObj.addProperty(&quot;verified&quot;, false);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

	vars.put(&quot;member_put_create_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	

	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);

	//store id for other sampler usage
	vars.put(&quot;member_put_create_id&quot;, id);

	//get member username
	String username = jsonObj.get(&quot;username&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);

	//store id for other sampler usage
	vars.put(&quot;member_put_create_username&quot;, username);
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="member.put (update) Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_put_update_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_put_update_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.put (token) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/oauth/token?username=${site_id}:${member_put_update_id}&amp;password=${member_setup_pwd}&amp;grant_type=password&amp;scope=account_management</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import org.apache.jmeter.util.JMeterUtils;
import java.util.Random;


try{
	//encode and save client credentials
	String idNotNull = vars.get(&quot;api_key&quot;);
     String secretNotNull = &quot;password&quot;;
     String userCredentials = idNotNull + &quot;:&quot; + secretNotNull;
     final byte[] authBytes = userCredentials.getBytes(StandardCharsets.UTF_8);
	String encodedCredentials = Base64.encodeBase64String(authBytes);
	vars.put(&quot;encodedCredentialsMemberRemove&quot;, encodedCredentials);

	//get member id from global list if local scope is null 
	String memberId = vars.get(&quot;member_put_create_id&quot;);
	String memberUsername = vars.get(&quot;member_put_create_username&quot;);
	
	if(memberId == null) {
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		//log.info(&quot;memberList = &quot; + memberList);
		String usernameList = JMeterUtils.getProperty(&quot;username_list&quot;);
		//log.info(&quot;usernameList = &quot; + usernameList);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		//log.info(&quot;memberIds = &quot; + memberIds);
		List usernames = new ArrayList(Arrays.asList(usernameList.split(&quot;,&quot;)));
		//log.info(&quot;usernames = &quot; + usernames);
		Random random = new Random();
		vars.put(&quot;member_put_update_id&quot;, memberIds.get(random.nextInt(memberIds.size())));   
		vars.put(&quot;member_put_update_username&quot;, usernames.get(random.nextInt(usernames.size())));
	} else {
		vars.put(&quot;member_put_update_id&quot;, memberId);  
		vars.put(&quot;member_put_update_username&quot;, memberUsername);   		
	}
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member setUp Thread Group&apos; -&gt; &apos;member.put (update)&apos; Throughput Controller -&gt; &apos;member token HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	//get client token id
	String id = jsonObj.get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;member_put_update_token_id&quot;, id);
	JMeterUtils.setProperty(&quot;member_put_update_token_id&quot;, id);
	//log.info(&quot;member_put_update_token_id = &quot; + JMeterUtils.getProperty(&quot;member_put_update_token_id&quot;));
}
catch (Exception ex){
	log.error(&quot;Error in &apos;member setUp Thread Group&apos; -&gt; &apos;member.put(update)&apos; -&gt; &apos;member token HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentialsMemberRemove}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.put (update) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_put_update_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members/${member_put_update_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{

 	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;)); 
	//log.info(&quot;client_token_id = &quot; + JMeterUtils.getProperty(&quot;client_token_id&quot;));
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

	vars.put(&quot;member_put_update_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.put (update) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{
	
	//store response time
	String memberPutUpdateNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_put_update_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(memberPutUpdateNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;member_put_update_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;member_put_update_ninetieth_percentile_list&quot;, memberPutUpdateNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final memberPutUpdateNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_put_update_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_put_create_duration = &quot; + duration);	
	vars.put(&quot;member_put_update_duration&quot;, String.valueOf(duration));
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.put (update) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${member_put_update_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="member.get Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_get_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_get_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.get member create HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_put_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{

 	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;)); 
	//log.info(&quot;client_token_id = &quot; + JMeterUtils.getProperty(&quot;client_token_id&quot;));
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, true);
     //emailObj.addProperty(&quot;verified&quot;, false);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

	vars.put(&quot;member_put_create_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	

	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);

	//store id for other sampler usage
	vars.put(&quot;member_put_create_id&quot;, id);

	//get member username
	String username = jsonObj.get(&quot;username&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);

	//store id for other sampler usage
	vars.put(&quot;member_put_create_username&quot;, username);
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.get (token) get HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/oauth/token?username=${site_id}:${member_get_id}&amp;password=${member_setup_pwd}&amp;grant_type=password&amp;scope=account_management</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import org.apache.jmeter.util.JMeterUtils;
import java.util.Random;


try{
	//encode and save client credentials
	String idNotNull = vars.get(&quot;api_key&quot;);
     String secretNotNull = &quot;password&quot;;
     String userCredentials = idNotNull + &quot;:&quot; + secretNotNull;
     final byte[] authBytes = userCredentials.getBytes(StandardCharsets.UTF_8);
	String encodedCredentials = Base64.encodeBase64String(authBytes);
	vars.put(&quot;encodedCredentialsMemberGet&quot;, encodedCredentials);

	//get member id from global list if local scope is null 
	String memberId = vars.get(&quot;member_put_create_id&quot;);
	String memberUsername = vars.get(&quot;member_put_create_username&quot;);
	if(memberId == null){
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		//log.info(&quot;memberList = &quot; + memberList);
		String usernameList = JMeterUtils.getProperty(&quot;username_list&quot;);
		//log.info(&quot;usernameList = &quot; + usernameList);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		//log.info(&quot;memberIds = &quot; + memberIds);
		List usernames = new ArrayList(Arrays.asList(usernameList.split(&quot;,&quot;)));
		//log.info(&quot;usernames = &quot; + usernames);
		Random random = new Random();
		vars.put(&quot;member_get_id&quot;, memberIds.get(random.nextInt(memberIds.size())));   
		vars.put(&quot;member_get_username&quot;, usernames.get(random.nextInt(usernames.size())));
	} else{
		vars.put(&quot;member_get_id&quot;, memberId);  
		vars.put(&quot;member_get_username&quot;, memberUsername);   		
	}
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member setUp Thread Group&apos; -&gt; &apos;member.get&apos; Throughput Controller -&gt; &apos;member token HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	//get client token id
	String id = jsonObj.get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;member_get_token_id&quot;, id);
	JMeterUtils.setProperty(&quot;member_get_token_id&quot;, id);
	//log.info(&quot;member_get_token_id = &quot; + JMeterUtils.getProperty(&quot;member_get_token_id&quot;));
}
catch (Exception ex){
	log.error(&quot;Error in &apos;member setUp Thread Group&apos; -&gt; &apos;member.get&apos; -&gt; &apos;member token HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentialsMemberGet}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.get HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members/${member_get_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	
	//store response time
	String memberGetNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_get_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(memberGetNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;member_get_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;member_get_ninetieth_percentile_list&quot;, memberGetNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final memberGetNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_get_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_get_duration = &quot; + duration);	
	vars.put(&quot;member_get_duration&quot;, String.valueOf(duration));
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.get HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${member_get_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="reset password Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${reset_password_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${reset_password_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="reset password member.put (create) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reset_password_member_put_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{

 	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;)); 
	//log.info(&quot;client_token_id = &quot; + JMeterUtils.getProperty(&quot;client_token_id&quot;));
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, true);
     //emailObj.addProperty(&quot;verified&quot;, false);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

	vars.put(&quot;reset_password_member_put_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;reset password Throughput Controller&apos; -&gt; &apos;reset password member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;reset_password_member_id&quot;, id);
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;reset password Throughput Controller&apos; -&gt; &apos;reset password member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member forgot password token HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/oauth/token?username=${site_id}:${reset_password_member_id}&amp;grant_type=passwordless&amp;scope=reset_password</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import java.util.Random;


try{
	//encode and save client credentials
	String idNotNull = vars.get(&quot;api_key&quot;);
     String secretNotNull = &quot;password&quot;;
     String userCredentials = idNotNull + &quot;:&quot; + secretNotNull;
     final byte[] authBytes = userCredentials.getBytes(StandardCharsets.UTF_8);
	String encodedCredentials = Base64.encodeBase64String(authBytes);
	vars.put(&quot;encodedCredentialsResetPassword&quot;, encodedCredentials);
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;reset password Throughput Controller -&gt; &apos;member forgot password token HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	//get client token id
	String id = jsonObj.get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;reset_password_token_id&quot;, id);
	JMeterUtils.setProperty(&quot;reset_password_token_id&quot;, id);
	//log.info(&quot;reset_password_token_id = &quot; + JMeterUtils.getProperty(&quot;reset_password_token_id&quot;));
}
catch (Exception ex){
	log.error(&quot;Error in &apos;member Thread Group&apos; -&gt; &apos;reset password&apos; -&gt; &apos;reset password member token HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentialsResetPassword}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="reset password HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reset_password_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members/${reset_password_member_id}/password/reset</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{

 	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;)); 
	
	// create payload
     JsonObject payload = new JsonObject();
 
     // create password field
     payload.addProperty(&quot;password&quot;, &quot;newpassword123&quot;);

	vars.put(&quot;reset_password_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;reset password Throughput Controller&apos; -&gt; &apos;reset password HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

try{

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;reset_password_duration = &quot; + duration);	
	vars.put(&quot;reset_password_duration&quot;, String.valueOf(duration));

	//store response time
	String resetPasswordNinetiethPercentileList = JMeterUtils.getProperty(&quot;reset_password_ninetieth_percentile_list&quot;);
	
	if(resetPasswordNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;reset_password_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
		JMeterUtils.setProperty(&quot;reset_password_ninetieth_percentile_list&quot;, resetPasswordNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}

	//log.info(&quot;Final resetPasswordNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;reset_password_ninetieth_percentile_list&quot;));	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;reset password HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${reset_password_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="member.remove Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_remove_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_remove_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="remove member.put (create) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_put_remove_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{

 	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;)); 
	//log.info(&quot;client_token_id = &quot; + JMeterUtils.getProperty(&quot;client_token_id&quot;));
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, true);
     //emailObj.addProperty(&quot;verified&quot;, false);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

	vars.put(&quot;member_put_remove_create_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.remove Throughput Controller&apos; -&gt; &apos;remove member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{

	//log.info(&quot;Final memberRemoveNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_remove_ninetieth_percentile_list&quot;));	

	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;member_put_remove_id&quot;, id);

	//get member username
	String username = jsonObj.get(&quot;username&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;username = &quot; + username);

	//store id for other sampler usage
	vars.put(&quot;member_put_remove_username&quot;, username);
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.remove Throughput Controller&apos; -&gt; &apos;remove member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.remove (token) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/oauth/token?username=${site_id}:${member_put_remove_username}&amp;password=${member_setup_pwd}&amp;grant_type=password&amp;scope=account_management</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import java.util.Random;


try{
	//encode and save client credentials
	String idNotNull = vars.get(&quot;api_key&quot;);
     String secretNotNull = &quot;password&quot;;
     String userCredentials = idNotNull + &quot;:&quot; + secretNotNull;
     final byte[] authBytes = userCredentials.getBytes(StandardCharsets.UTF_8);
	String encodedCredentials = Base64.encodeBase64String(authBytes);
	vars.put(&quot;encodedCredentialsMemberRemove&quot;, encodedCredentials);

	//get member id from global list if local scope is null 
	String memberId = vars.get(&quot;member_put_remove_id&quot;);
	String memberUsername = vars.get(&quot;member_put_remove_username&quot;);
	//log.info(&quot;memberId = &quot; + memberId);
	/*if(memberId == null){
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		//log.info(&quot;memberList = &quot; + memberList);
		String usernameList = JMeterUtils.getProperty(&quot;username_list&quot;);
		//log.info(&quot;usernameList = &quot; + usernameList);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		//log.info(&quot;memberIds = &quot; + memberIds);
		List usernames = new ArrayList(Arrays.asList(usernameList.split(&quot;,&quot;)));
		//log.info(&quot;usernames = &quot; + usernames);
		Random random = new Random();
		vars.put(&quot;member_put_remove_id&quot;, memberIds.get(random.nextInt(memberIds.size())));   
		vars.put(&quot;member_put_remove_username&quot;, usernames.get(random.nextInt(usernames.size())));     	
	} else{
		vars.put(&quot;member_put_remove_id&quot;, memberId);  
		vars.put(&quot;member_put_remove_username&quot;, memberUsername);   		
	}*/
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member setUp Thread Group&apos; -&gt; &apos;member.remove Throughput Controller -&gt; &apos;member token HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	//get client token id
	String id = jsonObj.get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;member_remove_token_id&quot;, id);
	JMeterUtils.setProperty(&quot;member_remove_token_id&quot;, id);
	//log.info(&quot;member_put_update_token_id = &quot; + JMeterUtils.getProperty(&quot;member_put_update_token_id&quot;));
}
catch (Exception ex){
	log.error(&quot;Error in &apos;member setUp Thread Group&apos; -&gt; &apos;member.remove&apos; -&gt; &apos;member token HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentialsMemberRemove}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.remove HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members/${member_put_remove_id}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

try{

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_remove_duration = &quot; + duration);	
	vars.put(&quot;member_remove_duration&quot;, String.valueOf(duration));

	//store response time
	String memberRemoveNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_remove_ninetieth_percentile_list&quot;);
	
	if(memberRemoveNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;member_remove_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
		JMeterUtils.setProperty(&quot;member_remove_ninetieth_percentile_list&quot;, memberRemoveNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}

	//log.info(&quot;Final memberRemoveNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_remove_ninetieth_percentile_list&quot;));	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.remove HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${member_remove_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="member.remove by client Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_remove_by_client_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_remove_by_client_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="remove by client member.put (create) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_put_remove_by_client_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{

 	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;)); 
	log.info(&quot;client_token_id = &quot; + JMeterUtils.getProperty(&quot;client_token_id&quot;));
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, true);
     //emailObj.addProperty(&quot;verified&quot;, false);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

	vars.put(&quot;member_put_remove_by_client_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; remove by client &apos;member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{

	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;member_put_remove_by_client_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.remove by client Throughput Controller&apos; -&gt; &apos;remove by client member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.remove by client HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/brands/${brand_id}/members/${member_put_remove_by_client_id}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

try{

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_remove_duration = &quot; + duration);	
	vars.put(&quot;member_remove_duration&quot;, String.valueOf(duration));

	//store response time
	String memberRemoveNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_remove_by_client_ninetieth_percentile_list&quot;);
	
	if(memberRemoveNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;member_remove_by_client_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
		JMeterUtils.setProperty(&quot;member_remove_by_client_ninetieth_percentile_list&quot;, memberRemoveNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}

	//log.info(&quot;Final memberRemoveNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_remove_ninetieth_percentile_list&quot;));	

}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.remove by client HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="member.delete Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_delete_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_delete_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete member.put (create) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_delete_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{

 	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;)); 
	//log.info(&quot;client_token_id = &quot; + JMeterUtils.getProperty(&quot;client_token_id&quot;));
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, true);
     //emailObj.addProperty(&quot;verified&quot;, false);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

	vars.put(&quot;member_delete_create_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.delete Throughput Controller&apos; -&gt; &apos;delete member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;member_delete_create_id&quot;, id);

	//get member username
	String username = jsonObj.get(&quot;username&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;username = &quot; + username);

	//store id for other sampler usage
	vars.put(&quot;member_delete_create_username&quot;, username);
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.delete Throughput Controller&apos; -&gt; &apos;delete member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.delete (token) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/oauth/token?username=${site_id}:${member_delete_create_username}&amp;password=${member_setup_pwd}&amp;grant_type=password&amp;scope=account_management</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import java.util.Random;


try{
	//encode and save client credentials
	String idNotNull = vars.get(&quot;api_key&quot;);
     String secretNotNull = &quot;password&quot;;
     String userCredentials = idNotNull + &quot;:&quot; + secretNotNull;
     final byte[] authBytes = userCredentials.getBytes(StandardCharsets.UTF_8);
	String encodedCredentials = Base64.encodeBase64String(authBytes);
	vars.put(&quot;encodedCredentialsMemberDelete&quot;, encodedCredentials);
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.delete Throughput Controller -&gt; &apos;member token HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	//get client token id
	String id = jsonObj.get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;member_delete_token_id&quot;, id);
	JMeterUtils.setProperty(&quot;member_delete_token_id&quot;, id);
	//log.info(&quot;member_delete_token_id = &quot; + JMeterUtils.getProperty(&quot;member_delete_token_id&quot;));
}
catch (Exception ex){
	log.error(&quot;Error in &apos;member Thread Group&apos; -&gt; &apos;member.delete&apos; -&gt; &apos;member token HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentialsMemberDelete}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.delete HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members/${member_delete_create_id}/status/deleted</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

try{

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_remove_duration = &quot; + duration);	
	vars.put(&quot;member_delete_duration&quot;, String.valueOf(duration));

	//store response time
	String memberDeleteNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_delete_ninetieth_percentile_list&quot;);
	
	if(memberDeleteNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;member_delete_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
		JMeterUtils.setProperty(&quot;member_delete_ninetieth_percentile_list&quot;, memberDeleteNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}

	//log.info(&quot;Final memberDeleteNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_delete_ninetieth_percentile_list&quot;));	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.delete HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${member_delete_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="member.link client resource Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_link_client_resource_executions}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_link_client_resource_executions}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.link client resource HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__evalVar(client_resource_member_link_uri)}${client_provider}/${client_provider_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Inputs Generator" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.UUID;


try {

	// Get the member&apos;s &quot;_id&quot; value from the global list if the local scope is null.
	String memberId = vars.get(&quot;client_resource_member_link_id&quot;);
	if (memberId == null) {
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		Random random = new Random();
		vars.put(&quot;client_resource_member_link_id&quot;, memberIds.get(random.nextInt(memberIds.size())));
	} 
	else {
		vars.put(&quot;client_resource_member_link_id&quot;, memberId);
	}

	// Get a random Unique ID value.
	String provider = &quot;sqe_client_&quot; + UUID.randomUUID().toString().substring(0,9).toLowerCase();
	// Push the generated value into a Jmeter variable so that it can be used in the request.
	vars.put(&quot;client_provider&quot;, provider);
	
	// Get a random Unique ID value.
	String provider_id = UUID.randomUUID().toString().toLowerCase().replaceAll(&quot;-&quot;, &quot;&quot;);
	provider_id = provider_id.substring(0, provider_id.length() - 16);
	// Push the generated value into a Jmeter variable so that it can be used in the request.
	vars.put(&quot;client_provider_id&quot;, provider_id);
     	
}
catch (Exception ex){
	
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.link client resource Throughput Controller&apos; -&gt; &apos;member.link client resource HTTP Request&apos; -&gt; &apos;Inputs Generator&apos;.\n&quot;);
    throw ex;
    
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Time Storage" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

try {

	// Store the response time.
	long duration = prev.getTime();
	String strDuration = String.valueOf(duration).trim();

	// Store all response times in a Jmeter property.
	String memberLinkClientResourceNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_link_client_resource_ninetieth_percentile_list&quot;);
	if(memberLinkClientResourceNinetiethPercentileList.isEmpty()) {
		JMeterUtils.setProperty(&quot;member_link_client_resource_ninetieth_percentile_list&quot;, strDuration);		
	} 
	else {
		JMeterUtils.setProperty(&quot;member_link_client_resource_ninetieth_percentile_list&quot;, memberLinkClientResourceNinetiethPercentileList + &quot;,&quot; + strDuration);		
	}
	
}
catch (Exception ex){
	
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.link client resource HTTP Request&apos; -&gt; &apos;Response Time Storage&apos;.\n &quot;);
	throw ex;
	
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="member.link member resource Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_link_member_resource_executions}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_link_member_resource_executions}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.link member create HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_put_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{

 	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;)); 
	//log.info(&quot;client_token_id = &quot; + JMeterUtils.getProperty(&quot;client_token_id&quot;));
	Random random = new Random();
	//String[] status = { &quot;active&quot;, &quot;pending&quot;, &quot;banned&quot;, &quot;deleted&quot; };
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     //emailObj.addProperty(&quot;primary&quot;, true);
     //emailObj.addProperty(&quot;verified&quot;, false);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);
 
     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     //JsonObject birthdateObj = new JsonObject();
     //birthdateObj.addProperty(&quot;year&quot;, 1984);
     //birthdateObj.addProperty(&quot;month&quot;, 10);
     //birthdateObj.addProperty(&quot;day&quot;, 13);
     //payload.add(&quot;birthdate&quot;, birthdateObj);
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     //phoneObj.addProperty(&quot;primary&quot;, true);
     //phoneObj.addProperty(&quot;mobile&quot;, false);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

	vars.put(&quot;member_put_create_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	

	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);

	//store id for other sampler usage
	vars.put(&quot;member_put_create_id&quot;, id);

	//get member username
	String username = jsonObj.get(&quot;username&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);

	//store id for other sampler usage
	vars.put(&quot;member_put_create_username&quot;, username);
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.put (create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Member Id Setter" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;


try {
	
	// Encode and save client credentials
	String idNotNull = vars.get(&quot;api_key&quot;);
     String secretNotNull = &quot;password&quot;;
     String userCredentials = idNotNull + &quot;:&quot; + secretNotNull;
     final byte[] authBytes = userCredentials.getBytes(StandardCharsets.UTF_8);
	String encodedCredentials = Base64.encodeBase64String(authBytes);
	vars.put(&quot;encodedCredentialsMemberLink&quot;, encodedCredentials);

	// Get the member&apos;s &quot;_id&quot; value from the global list if the local scope is null.
	String memberId = vars.get(&quot;member_put_create_id&quot;);
	if (memberId == null) {
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		Random random = new Random();
		memberId = memberIds.get(random.nextInt(memberIds.size()));
		vars.put(&quot;member_resource_member_link_id&quot;, memberId);
		vars.put(&quot;member_session_id&quot;, memberId);
	} 
	else {
		vars.put(&quot;member_resource_member_link_id&quot;, memberId);
		vars.put(&quot;member_session_id&quot;, memberId);
	}
}
catch (Exception ex) {
	
    log.error(&quot;Error in &apos;Member setUp Thread Group&apos; -&gt; &apos;member.link member resource Throughput Controller&apos; -&gt; &apos;Member Id Setter&apos;. \n&quot;);
    throw ex; 
    
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member token for member link HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__evalVar(member_token_uri)}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Member Session Token Storage" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try {
	
	// Store the response body.
	JsonParser parser = new JsonParser();
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	
	// Grab the session token from the response.
	String id = jsonObj.get(&quot;access_token&quot;).getAsString();
	// Store it in a Jmeter variable.
	vars.put(&quot;member_link_token_id&quot;, id);
	
}
catch (Exception ex) {
	
	log.error(&quot;Error in &apos;Member setUp Thread Group&apos; -&gt; &apos;member.link member resource Throughput Controller&apos; -&gt; &apos;member token for member link HTTP Request&apos; -&gt; &apos;Member Session Token Storage&apos;. \n&quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentialsMemberLink}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.link member resource HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__evalVar(member_resource_member_link_uri)}${member_provider}/${member_provider_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Inputs Generator" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.UUID;


try {
	
	// Get a random Unique ID value.
	String provider = &quot;sqe_member_&quot; + UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;).substring(0,9).toLowerCase();
	// Push the generated value into a Jmeter variable so that it can be used in the request.
	vars.put(&quot;member_provider&quot;, provider);
	
	// Get a random Unique ID value.
	String provider_id = UUID.randomUUID().toString().toLowerCase().replaceAll(&quot;-&quot;, &quot;&quot;);
	provider_id = provider_id.substring(0, provider_id.length() - 16);
	// Push the generated value into a Jmeter variable so that it can be used in the request.
	vars.put(&quot;member_provider_id&quot;, provider_id);
     	
}
catch (Exception ex){
	
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.link client resource Throughput Controller&apos; -&gt; &apos;member.link member resource HTTP Request&apos; -&gt; &apos;Inputs Generator&apos;.\n&quot;);
    throw ex;
    
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Time Storage" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

try {

	// Store the response time.
	long duration = prev.getTime();
	String strDuration = String.valueOf(duration).trim();

	// Store all response times in a Jmeter property.
	String memberLinkMemberResourceNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_link_member_resource_ninetieth_percentile_list&quot;);
	if(memberLinkMemberResourceNinetiethPercentileList.isEmpty()) {
		JMeterUtils.setProperty(&quot;member_link_member_resource_ninetieth_percentile_list&quot;, strDuration);		
	} 
	else {
		JMeterUtils.setProperty(&quot;member_link_member_resource_ninetieth_percentile_list&quot;, memberLinkMemberResourceNinetiethPercentileList + &quot;,&quot; + strDuration);		
	}
	
}
catch (Exception ex){
	
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.link member resource HTTP Request&apos; -&gt; &apos;Response Time Storage&apos;.\n &quot;);
	throw ex;
	
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${member_link_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="member.unlink client resource Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_unlink_client_resource_executions}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_unlink_client_resource_executions}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.link client resource HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__evalVar(client_resource_uri)}${client_resource_member_unlink_id}${__evalVar(providers)}${client_resource_member_unlink_client_provider}/${client_resource_member_unlink_client_provider_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.UUID;


try {

	// Get the member&apos;s &quot;_id&quot; value from the global list if the local scope is null.
	String memberId = vars.get(&quot;client_resource_member_unlink_id&quot;);
	if (memberId == null) {
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		Random random = new Random();
		vars.put(&quot;client_resource_member_unlink_id&quot;, memberIds.get(random.nextInt(memberIds.size())));
	} 
	else {
		vars.put(&quot;client_resource_member_unlink_id&quot;, memberId);
	}

	// Get a random Unique ID value.
	String provider = &quot;sqe_client_&quot; + UUID.randomUUID().toString().substring(0,9).toLowerCase();
	// Push the generated value into a Jmeter variable so that it can be used in the request.
	vars.put(&quot;client_resource_member_unlink_client_provider&quot;, provider);
	
	// Get a random Unique ID value.
	String provider_id = UUID.randomUUID().toString().toLowerCase().replaceAll(&quot;-&quot;, &quot;&quot;);
	provider_id = provider_id.substring(0, provider_id.length() - 16);
	// Push the generated value into a Jmeter variable so that it can be used in the request.
	vars.put(&quot;client_resource_member_unlink_client_provider_id&quot;, provider_id);
     	
}
catch (Exception ex){
	
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.unlink client resource Throughput Controller&apos; -&gt; &apos;member.link client resource HTTP Request&apos; -&gt; &apos;Inputs Generator&apos;.\n&quot;);
    throw ex;
    
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.unlink client resource HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__evalVar(client_resource_member_unlink_uri)}${client_resource_member_unlink_client_provider}/${client_resource_member_unlink_client_provider_id}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.UUID;


try {

	// Get the member&apos;s &quot;_id&quot; value from the global list if the local scope is null.
	String memberId = vars.get(&quot;client_resource_member_link_id&quot;);
	if (memberId == null) {
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		Random random = new Random();
		vars.put(&quot;client_resource_member_link_id&quot;, memberIds.get(random.nextInt(memberIds.size())));
	} 
	else {
		vars.put(&quot;client_resource_member_link_id&quot;, memberId);
	}
}
catch (Exception ex){
	
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.unlink client resource Throughput Controller&apos; -&gt; &apos;member.link client resource HTTP Request&apos; -&gt; &apos;Inputs Generator&apos;.\n&quot;);
    throw ex;
    
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

try {

	// Store the response time.
	long duration = prev.getTime();
	String strDuration = String.valueOf(duration).trim();

	// Store all response times in a Jmeter property.
	String memberUnlinkClientResourceNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_unlink_client_resource_ninetieth_percentile_list&quot;);
	if(memberUnlinkClientResourceNinetiethPercentileList.isEmpty()) {
		JMeterUtils.setProperty(&quot;member_unlink_client_resource_ninetieth_percentile_list&quot;, strDuration);		
	} 
	else {
		JMeterUtils.setProperty(&quot;member_unlink_client_resource_ninetieth_percentile_list&quot;, memberUnlinkClientResourceNinetiethPercentileList + &quot;,&quot; + strDuration);		
	}
	
}
catch (Exception ex){
	
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.unlink client resource HTTP Request&apos; -&gt; &apos;Response Time Storage&apos;.\n &quot;);
	throw ex;
	
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="member.unlink member resource Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_unlink_member_resource_executions}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_unlink_member_resource_executions}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.link client resource HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__evalVar(client_resource_uri)}${member_resource_member_unlink_id}${__evalVar(providers)}${member_resource_member_unlink_client_provider}/${member_resource_member_unlink_client_provider_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.UUID;


try {

	// Get the member&apos;s &quot;_id&quot; value from the global list if the local scope is null.
	String memberId = vars.get(&quot;member_resource_member_unlink_id&quot;);
	if (memberId == null) {
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		Random random = new Random();
		vars.put(&quot;member_resource_member_unlink_id&quot;, memberIds.get(random.nextInt(memberIds.size())));
	} 
	else {
		vars.put(&quot;member_resource_member_unlink_id&quot;, memberId);
	}

	// Get a random Unique ID value.
	String provider = &quot;sqe_client_&quot; + UUID.randomUUID().toString().substring(0,9).toLowerCase();
	// Push the generated value into a Jmeter variable so that it can be used in the request.
	vars.put(&quot;member_resource_member_unlink_client_provider&quot;, provider);
	
	// Get a random Unique ID value.
	String provider_id = UUID.randomUUID().toString().toLowerCase().replaceAll(&quot;-&quot;, &quot;&quot;);
	provider_id = provider_id.substring(0, provider_id.length() - 16);
	// Push the generated value into a Jmeter variable so that it can be used in the request.
	vars.put(&quot;member_resource_member_unlink_client_provider_id&quot;, provider_id);
     	
}
catch (Exception ex){
	
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.unlink member resource Throughput Controller&apos; -&gt; &apos;member.link member resource HTTP Request&apos; -&gt; &apos;Inputs Generator&apos;.\n&quot;);
    throw ex;
    
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member token for member unlink HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__evalVar(v2)}${__evalVar(oauth)}${site_id}:${member_resource_member_unlink_id}&amp;password=${member_setup_pwd}&amp;grant_type=password&amp;scope=account_management</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try {
	
	// Store the response body.
	JsonParser parser = new JsonParser();
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	
	// Grab the session token from the response.
	String id = jsonObj.get(&quot;access_token&quot;).getAsString();
	// Store it in a Jmeter variable.
	vars.put(&quot;member_unlink_token_id&quot;, id);
	
}
catch (Exception ex) {
	
	log.error(&quot;Error in &apos;Member setUp Thread Group&apos; -&gt; &apos;member.unlink for member resource Throughput Controller&apos; -&gt; &apos;member token for member unlink HTTP Request&apos; -&gt; &apos;Member Session Token Storage&apos;. \n&quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentialsMemberLink}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member.unlink member resource HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__evalVar(member_resource_member_unlink_uri)}${member_resource_member_unlink_client_provider}/${member_resource_member_unlink_client_provider_id}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.UUID;


try {

	// Get the member&apos;s &quot;_id&quot; value from the global list if the local scope is null.
	String memberId = vars.get(&quot;member_resource_member_link_id&quot;);
	if (memberId == null) {
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		Random random = new Random();
		vars.put(&quot;member_resource_member_link_id&quot;, memberIds.get(random.nextInt(memberIds.size())));
	} 
	else {
		vars.put(&quot;member_resource_member_link_id&quot;, memberId);
	} 	
}
catch (Exception ex){
	
    log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.link client resource Throughput Controller&apos; -&gt; &apos;member.link client resource HTTP Request&apos; -&gt; &apos;Inputs Generator&apos;.\n&quot;);
    throw ex;
    
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

try {

	// Store the response time.
	long duration = prev.getTime();
	String strDuration = String.valueOf(duration).trim();

	// Store all response times in a Jmeter property.
	String memberUnlinkMemberResourceNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_unlink_member_resource_ninetieth_percentile_list&quot;);
	if(memberUnlinkMemberResourceNinetiethPercentileList.isEmpty()) {
		JMeterUtils.setProperty(&quot;member_unlink_member_resource_ninetieth_percentile_list&quot;, strDuration);		
	} 
	else {
		JMeterUtils.setProperty(&quot;member_unlink_member_resource_ninetieth_percentile_list&quot;, memberUnlinkMemberResourceNinetiethPercentileList + &quot;,&quot; + strDuration);		
	}
	
}
catch (Exception ex){
	
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member.unlink member resource HTTP Request&apos; -&gt; &apos;Response Time Storage&apos;.\n &quot;);
	throw ex;
	
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${member_unlink_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Peak Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="jp@gc - Authentication Stepping Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">1000</stringProp>
        <stringProp name="Threads initial delay">15</stringProp>
        <stringProp name="Start users count">25</stringProp>
        <stringProp name="Start users count burst">25</stringProp>
        <stringProp name="Start users period">300</stringProp>
        <stringProp name="Stop users count">25</stringProp>
        <stringProp name="Stop users period">300</stringProp>
        <stringProp name="flighttime">86400</stringProp>
        <stringProp name="rampUp">15</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="User Variable Setter BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

String app_port = vars.get(&quot;port&quot;);
String proxy_host = vars.get(&quot;proxy_host&quot;);
String proxy_port = vars.get(&quot;proxy_port&quot;);

//log.info(&quot;app_port = &quot; + app_port);
//log.info(&quot;proxy_host = &quot; + proxy_host);
//log.info(&quot;proxy_port = &quot; + proxy_port);
//System.out.println(&quot;app_port = &quot; + app_port);
//System.out.println(&quot;proxy_host = &quot; + proxy_host);
//System.out.println(&quot;proxy_port = &quot; + proxy_port);

//make JMeter proxy variable. fields empty if not set via command args which will equate to 1
if(proxy_host.equals(&quot;1&quot;) || proxy_port.equals(&quot;1&quot;)){	
	vars.put(&quot;proxy_host&quot;, &quot;&quot;);
	vars.put(&quot;proxy_port&quot;, &quot;&quot;);	
	log.info(&quot;No proxy was used.&quot;);
}

if(app_port.equals(&quot;1&quot;)){	
	vars.put(&quot;port&quot;, &quot;&quot;);
	log.info(&quot;No application port was used.&quot;);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Client Auth Token.get Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${client_auth_token_get_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${client_auth_token_get_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="client token.get HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/oauth/token?grant_type=client_credentials&amp;scope=${scope}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import java.util.Random;


try{
	//encode and save client credentials
	Random random = new Random();
	String[] scope = { &quot;write&quot;, &quot;read&quot; };
	String[] apiKey = { vars.get(&quot;api_key_1&quot;), vars.get(&quot;api_key_2&quot;), vars.get(&quot;api_key_3&quot;) };
	String idNotNull = apiKey[random.nextInt(apiKey.length)];
     String secretNotNull = &quot;&quot;;
     String userCredentials = idNotNull + &quot;:&quot; + secretNotNull;
     final byte[] authBytes = userCredentials.getBytes(StandardCharsets.UTF_8);
	String encodedCredentials = Base64.encodeBase64String(authBytes);
	vars.put(&quot;encodedCredentials&quot;, encodedCredentials);
 	vars.put(&quot;scope&quot;, &quot;member.put &quot; + scope[random.nextInt(scope.length)]);
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Client Auth Token.get HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	//get client token id
	String id = jsonObj.get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;client_auth_get_token_id&quot;, id);
	JMeterUtils.setProperty(&quot;client_auth_get_token_id&quot;, id);
	//log.info(&quot;client_auth_get_token_id = &quot; + JMeterUtils.getProperty(&quot;client_auth_get_token_id&quot;));
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Client Auth Token HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentials}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Client Auth Token.check Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${client_auth_check_token_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${client_auth_check_token_dstr_pct}</stringProp>
          <stringProp name="TestPlan.comments">This is the Throughput controller for the /check_token requests. </stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="client token.check HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${client_auth_get_token_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${v2}${sessions_oauth}${check_token}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">This is the HTTP request element for the check_token end point. This is used for checking the client tokens that were generated. External services primarily utilize this end point (Example, Mailman).</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	//store response time
	String clientAuthTokenCheckNinetiethPercentileList = JMeterUtils.getProperty(&quot;client_auth_token_check_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(clientAuthTokenCheckNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;client_auth_token_check_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;client_auth_token_check_ninetieth_percentile_list&quot;, clientAuthTokenCheckNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final clientAuthTokenCheckNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;client_auth_token_check_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;client_auth_token_check_duration = &quot; + duration);	
	vars.put(&quot;client_auth_token_check_duration&quot;, String.valueOf(duration));
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Client Auth Token Check HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentials}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Form}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Member Auth Token.get Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_auth_token_get_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_auth_token_get_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member token.get HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/oauth/token?username=${site_id}:${member_token_get_member_username}&amp;password=${member_setup_pwd}&amp;grant_type=password&amp;scope=account_management</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import org.apache.jmeter.util.JMeterUtils;
import java.util.Random;


try{
	//encode and save client credentials
	Random random = new Random();
	String[] apiKey = { vars.get(&quot;api_key_1&quot;), vars.get(&quot;api_key_2&quot;), vars.get(&quot;api_key_3&quot;) };
	String idNotNull = apiKey[random.nextInt(apiKey.length)];
     String secretNotNull = &quot;password&quot;;
     String userCredentials = idNotNull + &quot;:&quot; + secretNotNull;
     final byte[] authBytes = userCredentials.getBytes(StandardCharsets.UTF_8);
	String encodedCredentials = Base64.encodeBase64String(authBytes);
	vars.put(&quot;encodedCredentialsMemberTokenGet&quot;, encodedCredentials);
	String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
	//log.info(&quot;memberList = &quot; + memberList);
	String usernameList = JMeterUtils.getProperty(&quot;username_list&quot;);
	//log.info(&quot;usernameList = &quot; + usernameList);
	List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
	//log.info(&quot;memberIds = &quot; + memberIds);
	List usernames = new ArrayList(Arrays.asList(usernameList.split(&quot;,&quot;)));
	//log.info(&quot;usernames = &quot; + usernames);
	vars.put(&quot;member_token_get_member_id&quot;, memberIds.get(random.nextInt(memberIds.size())));   
	vars.put(&quot;member_token_get_member_username&quot;, usernames.get(random.nextInt(usernames.size())));     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Member Auth Token Throughput Controller -&gt; &apos;member token.get HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
/**	
	//store response time
	String memberAuthTokenGetNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_auth_token_get_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(memberAuthTokenGetNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;member_auth_token_get_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;member_auth_token_get_ninetieth_percentile_list&quot;, memberAuthTokenGetNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final memberAuthTokenGetNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_auth_token_get_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;client_auth_token_get_duration = &quot; + duration);	
	vars.put(&quot;member_auth_token_get_duration&quot;, String.valueOf(duration));
**/	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	//get client token id
	String id = jsonObj.get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;member_token_get_id&quot;, id);
	JMeterUtils.setProperty(&quot;member_token_get_id&quot;, id);
	//log.info(&quot;member_token_get_id = &quot; + JMeterUtils.getProperty(&quot;member_token_get_id&quot;));
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Member Auth Token.get&apos; -&gt; &apos;member token.get HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentialsMemberTokenGet}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Member Reset Password Token.get Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_reset_password_token_get_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_reset_password_token_get_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member reset password token.get HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/oauth/token?username=${site_id}:${member_reset_password_token_get_member_username}&amp;grant_type=passwordless&amp;scope=reset_password</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import org.apache.jmeter.util.JMeterUtils;
import java.util.Random;


try{
	//encode and save client credentials
	Random random = new Random();
	String idNotNull = vars.get(&quot;api_key_1&quot;);
     String secretNotNull = &quot;password&quot;;
     String userCredentials = idNotNull + &quot;:&quot; + secretNotNull;
     final byte[] authBytes = userCredentials.getBytes(StandardCharsets.UTF_8);
	String encodedCredentials = Base64.encodeBase64String(authBytes);
	vars.put(&quot;encodedCredentialsMemberResetPasswordTokenGet&quot;, encodedCredentials);
	String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
	//log.info(&quot;memberList = &quot; + memberList);
	String usernameList = JMeterUtils.getProperty(&quot;username_list&quot;);
	//log.info(&quot;usernameList = &quot; + usernameList);
	List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
	//log.info(&quot;memberIds = &quot; + memberIds);
	List usernames = new ArrayList(Arrays.asList(usernameList.split(&quot;,&quot;)));
	//log.info(&quot;usernames = &quot; + usernames);
	vars.put(&quot;member_reset_password_token_get_member_id&quot;, memberIds.get(random.nextInt(memberIds.size())));   
	vars.put(&quot;member_reset_password_token_get_member_username&quot;, usernames.get(random.nextInt(usernames.size())));     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Member Reset Password Token Throughput Controller -&gt; &apos;member reset password token.get HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
/**	
	//store response time
	String memberResetPasswordTokenGetNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_reset_password_token_get_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(memberResetPasswordTokenGetNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;member_reset_password_token_get_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;member_reset_password_token_get_ninetieth_percentile_list&quot;, memberResetPasswordTokenGetNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final memberResetPasswordTokenGetNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_reset_password_token_get_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_reset_password_token_get_duration = &quot; + duration);	
	vars.put(&quot;member_reset_password_token_get_duration&quot;, String.valueOf(duration));
**/	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	//get client token id
	String id = jsonObj.get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;member_reset_password_token_get_id&quot;, id);
	JMeterUtils.setProperty(&quot;member_reset_password_token_get_id&quot;, id);
	//log.info(&quot;member_reset_password_token_get_id = &quot; + JMeterUtils.getProperty(&quot;member_reset_password_token_get_id&quot;));
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Member Reset Password Token.get&apos; -&gt; &apos;member reset password token.get HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentialsMemberResetPasswordTokenGet}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Member Auth Token.refresh Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_auth_refresh_token_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_auth_refresh_token_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member token.refresh (token.get) HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/oauth/token?username=${site_id}:${member_token_refresh_member_username}&amp;password=${member_setup_pwd}&amp;grant_type=password&amp;scope=account_management</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import org.apache.jmeter.util.JMeterUtils;
import java.util.Random;


try{
	//encode and save client credentials
	Random random = new Random();
	String[] apiKey = { vars.get(&quot;api_key_1&quot;), vars.get(&quot;api_key_2&quot;), vars.get(&quot;api_key_3&quot;) };
	String idNotNull = apiKey[random.nextInt(apiKey.length)];
     String secretNotNull = &quot;password&quot;;
     String userCredentials = idNotNull + &quot;:&quot; + secretNotNull;
     final byte[] authBytes = userCredentials.getBytes(StandardCharsets.UTF_8);
	String encodedCredentials = Base64.encodeBase64String(authBytes);
	vars.put(&quot;encodedCredentialsMemberTokenRefresh&quot;, encodedCredentials);
	String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
	//log.info(&quot;memberList = &quot; + memberList);
	String usernameList = JMeterUtils.getProperty(&quot;username_list&quot;);
	//log.info(&quot;usernameList = &quot; + usernameList);
	List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
	//log.info(&quot;memberIds = &quot; + memberIds);
	List usernames = new ArrayList(Arrays.asList(usernameList.split(&quot;,&quot;)));
	//log.info(&quot;usernames = &quot; + usernames);
	vars.put(&quot;member_token_refresh_member_id&quot;, memberIds.get(random.nextInt(memberIds.size())));   
	vars.put(&quot;member_token_refresh_member_username&quot;, usernames.get(random.nextInt(usernames.size())));     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Member Refresh Token Throughput Controller -&gt; &apos;member refresh token.get HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//store response time
	long duration = prev.getTime();
	//log.info(&quot;client_auth_token_get_duration = &quot; + duration);	
	vars.put(&quot;member_auth_token_get_duration&quot;, String.valueOf(duration));
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	//get client token id
	String id = jsonObj.get(&quot;refresh_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;member_refresh_token_id&quot;, id);
	JMeterUtils.setProperty(&quot;member_refresh_token_id&quot;, id);
	//log.info(&quot;member_refresh_token_id = &quot; + JMeterUtils.getProperty(&quot;member_refresh_token_id&quot;));
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Member Refresh Token.get&apos; -&gt; &apos;member refresh token.get HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentialsMemberTokenRefresh}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member token.refresh HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/oauth/token?username=${site_id}:${member_token_refresh_member_username}&amp;password=${member_setup_pwd}&amp;grant_type=refresh_token&amp;scope=account_management&amp;refresh_token=${member_refresh_token_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//store response time
	String memberAuthTokenRefreshNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_auth_token_refresh_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(memberAuthTokenRefreshNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;member_auth_token_refresh_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;member_auth_token_refresh_ninetieth_percentile_list&quot;, memberAuthTokenRefreshNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final memberAuthTokenRefreshNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_auth_token_refresh_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;client_auth_token_get_duration = &quot; + duration);	
	vars.put(&quot;member_auth_token_refresh_duration&quot;, String.valueOf(duration));

}
catch (Exception ex){
	log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Member Auth Token.get&apos; -&gt; &apos;member token.get HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentialsMemberTokenRefresh}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Member Sessions.get Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_sessions_get_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_sessions_get_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member sessions.get HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/brands/${brand_id}/members/${member_sessions_get_member_id}/sessions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{

 	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;));
	Random random = new Random(); 
	String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
	//log.info(&quot;memberList = &quot; + memberList);
	String usernameList = JMeterUtils.getProperty(&quot;username_list&quot;);
	//log.info(&quot;usernameList = &quot; + usernameList);
	List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
	//log.info(&quot;memberIds = &quot; + memberIds);
	List usernames = new ArrayList(Arrays.asList(usernameList.split(&quot;,&quot;)));
	//log.info(&quot;usernames = &quot; + usernames);
	vars.put(&quot;member_sessions_get_member_id&quot;, memberIds.get(random.nextInt(memberIds.size())));   
	vars.put(&quot;member_sessions_get_member_username&quot;, usernames.get(random.nextInt(usernames.size())));
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;member sessions.get HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	String memberSessionsGetNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_sessions_get_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(memberSessionsGetNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;member_sessions_get_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;member_sessions_get_ninetieth_percentile_list&quot;, memberSessionsGetNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final memberSessionsGetNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_sessions_get_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_get_duration = &quot; + duration);	
	vars.put(&quot;member_sessions_get_duration&quot;, String.valueOf(duration));
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Member Thread Group&apos; -&gt; &apos;member sessions.get HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Member Sessions.delete Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_sessions_delete_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_sessions_delete_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member sessions.delete (member.create) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_sessions_delete_member_put_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	Random random = new Random();
	String[] status = { &quot;active&quot; };
     String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, &quot;active&quot;);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);

     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

     //log.info(&quot;payload.toString() = &quot; + payload.toString());
	
	vars.put(&quot;member_sessions_delete_member_put_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Authentication setUp Thread Group&apos; -&gt; &apos;Member Sessions.delete&apos; -&gt; &apos;member sessions.delete (member.create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id and username
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	String username = jsonObj.get(&quot;username&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);
	//log.info(&quot;username = &quot; + username);
	//set id
	vars.put(&quot;member_sessions_delete_member_id&quot;, id);
	JMeterUtils.setProperty(&quot;member_sessions_delete_member_id&quot;, id);

	//set username
	vars.put(&quot;member_sessions_delete_member_username&quot;, username);
	JMeterUtils.setProperty(&quot;member_sessions_delete_member_username&quot;, username);
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Authentication setUp Thread Group&apos; -&gt; &apos;Member Sessions.delete&apos; -&gt; &apos;member sessions.delete (member.create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member sessions.delete (member token.get) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/oauth/token?username=${site_id}:${member_sessions_delete_member_username}&amp;password=${member_setup_pwd}&amp;grant_type=password&amp;scope=account_management</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import org.apache.jmeter.util.JMeterUtils;
import java.util.Random;


try{
	//encode and save client credentials
	Random random = new Random();
	String idNotNull = vars.get(&quot;api_key_1&quot;);
     String secretNotNull = &quot;password&quot;;
     String userCredentials = idNotNull + &quot;:&quot; + secretNotNull;
     final byte[] authBytes = userCredentials.getBytes(StandardCharsets.UTF_8);
	String encodedCredentials = Base64.encodeBase64String(authBytes);
	vars.put(&quot;encodedCredentialsMemberSessionsDelete&quot;, encodedCredentials);
    	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Member Auth Token Throughput Controller -&gt; &apos;member token.get HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	//get client token id
	String id = jsonObj.get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;member_sessions_delete_token_id&quot;, id);
	JMeterUtils.setProperty(&quot;member_sessions_delete_token_id&quot;, id);
	//log.info(&quot;member_sessions_delete_token_id = &quot; + JMeterUtils.getProperty(&quot;member_sessions_delete_token_id&quot;));
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Member Sessions.delete&apos; -&gt; &apos;member sessions.delete(member token.get) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentialsMemberSessionsDelete}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member sessions.delete HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members/${member_sessions_delete_member_id}/sessions</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	String memberSessionsDeleteNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_sessions_delete_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(memberSessionsDeleteNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;member_sessions_delete_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;member_sessions_delete_ninetieth_percentile_list&quot;, memberSessionsDeleteNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final memberSessionsDeleteNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_sessions_delete_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_get_duration = &quot; + duration);	
	vars.put(&quot;member_sessions_delete_duration&quot;, String.valueOf(duration));
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Member Sessions.delete Throughput Controller&apos; -&gt; &apos;member sessions.delete HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${member_sessions_delete_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Member Sessions.delete by client Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${member_sessions_delete_by_cilent_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${member_sessions_delete_by_cilent_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member sessions.delete by client (member.create) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_sessions_delete_by_client_member_put_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/sites/${site_id}/members</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;

try{

	Random random = new Random();
	String[] status = { &quot;active&quot; };
     String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
     JsonObject payload = new JsonObject();

     // create status field
     payload.addProperty(&quot;status&quot;, &quot;active&quot;);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     emailField.add(emailObj);
     payload.add(&quot;email&quot;, emailField);
 
     // create password field
     payload.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     payload.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     //addressObj.addProperty(&quot;primary&quot;, true);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     payload.add(&quot;address&quot;, addressField);

     // create username field
     payload.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     payload.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     payload.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     payload.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     payload.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     payload.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     payload.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     payload.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     // create birthdate field
     payload.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     phoneField.add(phoneObj);
     payload.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     payload.add(&quot;brand_data&quot;, brandDataObj);

     //log.info(&quot;payload.toString() = &quot; + payload.toString());
	
	vars.put(&quot;member_sessions_delete_by_client_member_put_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Authentication setUp Thread Group&apos; -&gt; &apos;Member Sessions.delete by client&apos; -&gt; &apos;member sessions.delete by client (member.create) HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id and username
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	String username = jsonObj.get(&quot;username&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);
	//log.info(&quot;username = &quot; + username);
	//set id
	vars.put(&quot;member_sessions_delete_by_client_member_id&quot;, id);
	JMeterUtils.setProperty(&quot;member_sessions_delete_by_client_member_id&quot;, id);

	//set username
	vars.put(&quot;member_sessions_delete_by_client_member_username&quot;, username);
	JMeterUtils.setProperty(&quot;member_sessions_delete_by_client_member_username&quot;, username);
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Authentication setUp Thread Group&apos; -&gt; &apos;Member Sessions.delete by client&apos; -&gt; &apos;member sessions.delete by client (member.create) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member sessions.delete by client (member token.get) HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/oauth/token?username=${site_id}:${member_sessions_delete_by_client_member_username}&amp;password=${member_setup_pwd}&amp;grant_type=password&amp;scope=account_management</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import org.apache.jmeter.util.JMeterUtils;
import java.util.Random;


try{
	//encode and save client credentials
	Random random = new Random();
	String idNotNull = vars.get(&quot;api_key_1&quot;);
     String secretNotNull = &quot;password&quot;;
     String userCredentials = idNotNull + &quot;:&quot; + secretNotNull;
     final byte[] authBytes = userCredentials.getBytes(StandardCharsets.UTF_8);
	String encodedCredentials = Base64.encodeBase64String(authBytes);
	vars.put(&quot;encodedCredentialsMemberSessionsDeleteByClient&quot;, encodedCredentials);
}
catch (Exception ex){
log.error(&quot;Error in&apos;Authentication Thread Group&apos;-&gt;&apos;Member Sessions.delete by client Throughput Controller-&gt;&apos;member sessions.delete by client(member token.get)HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos;&quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try{
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	//get client token id
	String id = jsonObj.get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;member_sessions_delete_by_client_session_id&quot;, id);
	JMeterUtils.setProperty(&quot;member_sessions_delete_by_client_session_id&quot;, id);
	//log.info(&quot;member_sessions_delete_by_client_session_id = &quot; + JMeterUtils.getProperty(&quot;member_sessions_delete_by_client_session_id&quot;));
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Member Sessions.delete by client&apos; -&gt; &apos;member sessions.delete by client(member token.get) HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentialsMemberSessionsDeleteByClient}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member sessions.delete by client HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/brands/${brand_id}/members/${member_sessions_delete_by_client_member_id}/sessions/${member_sessions_delete_by_client_session_id}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
		
	//store response time
	String memberSessionsDeleteByClientNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_sessions_delete_by_client_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(memberSessionsDeleteByClientNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;member_sessions_delete_by_client_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;member_sessions_delete_by_client_ninetieth_percentile_list&quot;, memberSessionsDeleteByClientNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final memberSessionsDeleteByClientNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;member_sessions_delete_by_client_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_get_duration = &quot; + duration);	
	vars.put(&quot;member_sessions_delete_by_client_duration&quot;, String.valueOf(duration));
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Member Sessions.delete by client Throughput Controller&apos; -&gt; &apos;member sessions.delete by client HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="(disabled) Client Auth Email Throughput Controller" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${client_auth_email_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${client_auth_email_dstr_pct}</stringProp>
          <stringProp name="TestPlan.comments">This is the Throughput controller for the client email requests</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="client auth email HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${email_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env_mailman}</stringProp>
            <stringProp name="HTTPSampler.port">${mailman_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${idx_email}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">This is the HTTP request element for the email end point. </stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Mailman environment selector" enabled="true">
              <stringProp name="TestPlan.comments">This BeanShell PreProcessor is used to select a Mailman environment.</stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
try {
	
	// Get the current IDX environment.
	String idxEnv = vars.get(&quot;hostname&quot;);

	// Initialize a string to store the Mailman environment.
	String mailmanEnv = &quot;&quot;;

	// Set the Mailman host appropriately.
	if(idxEnv.contains(&quot;dev&quot;)) {
		mailmanEnv = vars.get(&quot;dev_mailman&quot;);
		// Set the port.
		vars.put(&quot;mailman_port&quot;, &quot;8080&quot;);
	}
	else if (idxEnv.contains(&quot;qa&quot;)) {
		mailmanEnv = vars.get(&quot;qa_mailman&quot;);
		// Set the port.
		vars.put(&quot;mailman_port&quot;, &quot;8080&quot;);
	}
	else if(idxEnv.contains(&quot;stage&quot;) || idxEnv.contains(&quot;stg&quot;)) {
		mailmanEnv = vars.get(&quot;stage_mailman&quot;);
	}
	else if(idxEnv.contains(&quot;prod&quot;)) {
		mailmanEnv = vars.get(&quot;prod_mailman&quot;);
	}
	else {
		log.error(String.format(&quot;Unknown IDX2 hostname, &apos;%s&apos; passed. Please pass a valid host.&quot;, idxEnv));
	}

	// Put the appropriate Mailman host name in the global environment variable.
	vars.put(&quot;env_mailman&quot;, mailmanEnv);
	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;client auth email HTTP Request&apos; -&gt; &apos;Mailman environment selector&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Email payload" enabled="true">
              <stringProp name="TestPlan.comments">This BeanShell PreProcessor element is used to generate an email payload to be used in the idx email request.</stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import java.lang.*;

try {
	     
	// Store a constant for SQE text.
	String SQE = &quot;SQE Performance&quot;;
	
	// Store a unique value for concatenation.
	String uniqueVal = &quot;Uniq_&quot; + System.currentTimeMillis() + &quot;_&quot; + Thread.currentThread().getId();
		
	// Store the &quot;subject&quot; property.
	String subject = SQE + &quot; email subject - &quot; + uniqueVal;

	// Store the &quot;html&quot; property.
	String htmlText = &quot;&lt;html&gt;&lt;head&gt;%&quot; + SQE + &quot; email head &quot; + uniqueVal + &quot;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&quot;
      	+ &quot;&lt;a href=\&quot;https://wiki.inbcu.com/display/DPIMSE/IDX2.0+How+to+send+email+via+mailman\&quot;&gt;&quot;
      	+ &quot;How to send email via Mailman&lt;/a&gt;&lt;br/&gt;&quot; + SQE + &quot; HTML Email &quot; + uniqueVal + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;

	// Store the &quot;text&quot; property.
	String text = SQE + &quot; email text &quot; + uniqueVal;
	
	// Initialize the payload.
     JsonObject payload = new JsonObject();

     // Add the &quot;to&quot; property. Keeping it a valid test email to avoid AWS SES issues.
     payload.addProperty(&quot;to&quot;, &quot;jsmithnbcu2@gmail.com&quot;);

     // Add the &quot;from&quot; property. 
     // Cannot use a random email as it has to be an SES verified address.
     payload.addProperty(&quot;from&quot;, &quot;${ses_verified_email}&quot;);
 
     // Add the &quot;html&quot; property.
     payload.addProperty(&quot;html&quot;, htmlText);

     // Add the &quot;text&quot; property.
     payload.addProperty(&quot;text&quot;, text);

     // Add the &quot;subject&quot; property.
     payload.addProperty(&quot;subject&quot;, subject);
     
     // Add the processed payload to a Jmeter environment variable.
	vars.put(&quot;email_payload&quot;, payload.toString());
     
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;client auth email HTTP Request&apos; -&gt; &apos;Email payload&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try {
	
	//Store the 90th percentile response time.
	String clientSendEmailNinetiethPercentileList = JMeterUtils.getProperty(&quot;client_auth_send_email_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(clientSendEmailNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;client_auth_send_email_ninetieth_percentile_list&quot;, String.valueOf(rps));
	} else{
		JMeterUtils.setProperty(&quot;client_auth_send_email_ninetieth_percentile_list&quot;, clientSendEmailNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));
	}

	log.info(&quot;Final clientSendEmailNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;client_auth_send_email_ninetieth_percentile_list&quot;));	

	//Store response time
	long duration = prev.getTime();
	log.info(&quot;client_auth_send_email_duration = &quot; + duration);	
	vars.put(&quot;client_auth_send_email_duration&quot;, String.valueOf(duration));
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Authentication Thread Group&apos; -&gt; &apos;Client auth email HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
              <stringProp name="TestPlan.comments">The PostProcessor Beanshell element to store the 90% response times.</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_auth_get_token_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Peak Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="jp@gc - Workflow Stepping Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">1000</stringProp>
        <stringProp name="Threads initial delay">15</stringProp>
        <stringProp name="Start users count">25</stringProp>
        <stringProp name="Start users count burst">25</stringProp>
        <stringProp name="Start users period">300</stringProp>
        <stringProp name="Stop users count">25</stringProp>
        <stringProp name="Stop users period">300</stringProp>
        <stringProp name="flighttime">86400</stringProp>
        <stringProp name="rampUp">15</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="User Variable Setter BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

String app_port = vars.get(&quot;port&quot;);
String proxy_host = vars.get(&quot;proxy_host&quot;);
String proxy_port = vars.get(&quot;proxy_port&quot;);
String client_token_id = JMeterUtils.getProperty(&quot;client_token_id&quot;);

//log.info(&quot;app_port = &quot; + app_port);
//log.info(&quot;proxy_host = &quot; + proxy_host);
//log.info(&quot;proxy_port = &quot; + proxy_port);
//System.out.println(&quot;app_port = &quot; + app_port);
//System.out.println(&quot;proxy_host = &quot; + proxy_host);
//System.out.println(&quot;proxy_port = &quot; + proxy_port);

//make JMeter proxy variable. fields empty if not set via command args which will equate to 1
if(proxy_host.equals(&quot;1&quot;) || proxy_port.equals(&quot;1&quot;)){	
	vars.put(&quot;proxy_host&quot;, &quot;&quot;);
	vars.put(&quot;proxy_port&quot;, &quot;&quot;);	
	log.info(&quot;No proxy was used.&quot;);
}

if(app_port.equals(&quot;1&quot;)){	
	vars.put(&quot;port&quot;, &quot;&quot;);
	log.info(&quot;No application port was used.&quot;);
}

//set client token id
vars.put(&quot;client_token_id&quot;, client_token_id); </stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="workflow registration Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_registration_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_registration_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow registration HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_registration_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/registration</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{

	Random random = new Random();
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));

     //create data object
     JsonObject dataObject = new JsonObject();
     // create status field
     dataObject.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     emailField.add(emailObj);
     dataObject.add(&quot;email&quot;, emailField);
 
     // create password field
     dataObject.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     dataObject.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     dataObject.add(&quot;address&quot;, addressField);
 
     // create username field
     dataObject.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     dataObject.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     dataObject.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     dataObject.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     dataObject.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     dataObject.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     dataObject.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     dataObject.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     dataObject.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     phoneField.add(phoneObj);
     dataObject.add(&quot;phone&quot;, phoneField);

	JsonObject finalDataObject = new JsonObject();
	finalDataObject.add(&quot;member&quot;, dataObject);
	payload.add(&quot;data&quot;, finalDataObject);

	vars.put(&quot;workflow_registration_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow registration HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{

	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	JsonObject dataObj = jsonObj.get(&quot;data&quot;).getAsJsonObject();
	
	String id = dataObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;registration_wf_member_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow registration HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="workflow profile update Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_profile_update_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_profile_update_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow profile update.registration HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_update_workflow_registration_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/registration</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;));  
 
	Random random = new Random();
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));

     //create data object
     JsonObject dataObject = new JsonObject();
     // create status field
     dataObject.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     emailField.add(emailObj);
     dataObject.add(&quot;email&quot;, emailField);
 
     // create password field
     dataObject.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     dataObject.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     dataObject.add(&quot;address&quot;, addressField);
 
     // create username field
     dataObject.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     dataObject.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     dataObject.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     dataObject.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     dataObject.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     dataObject.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     dataObject.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     dataObject.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     dataObject.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     phoneField.add(phoneObj);
     dataObject.add(&quot;phone&quot;, phoneField);

     JsonObject finalDataObject = new JsonObject();
	finalDataObject.add(&quot;member&quot;, dataObject);
	payload.add(&quot;data&quot;, finalDataObject);

	vars.put(&quot;workflow_update_workflow_registration_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow profile update HTTP Request&apos;-&gt; workflow profile update.registration -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	JsonObject dataObj = jsonObj.get(&quot;data&quot;).getAsJsonObject();
	
	String id = dataObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;profile_update_wf_member_id&quot;, id);

	//store token
	String token = dataObj.get(&quot;session&quot;).getAsJsonObject().get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;token = &quot; + token);

	//store token for other sampler usage
	vars.put(&quot;profile_update_wf_member_token&quot;, token);
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow profile update HTTP Request&apos;-&gt; workflow profile update.registration -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow profile update HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_profile_update_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/update</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	
	Random random = new Random();
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;profile_update_config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));

     //create member object
     JsonObject memberObject = new JsonObject();
     // create status field
     memberObject.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create password field
     memberObject.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     memberObject.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     memberObject.add(&quot;address&quot;, addressField);
 
     // create username field
     memberObject.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     memberObject.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     memberObject.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     memberObject.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     memberObject.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     memberObject.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     memberObject.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     memberObject.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     memberObject.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     phoneField.add(phoneObj);
     memberObject.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     memberObject.add(&quot;brand_data&quot;, brandDataObj);

 	//create data object
     JsonObject dataObject = new JsonObject();
     dataObject.add(&quot;member&quot;, memberObject);
	
	payload.add(&quot;data&quot;, dataObject);

	vars.put(&quot;workflow_profile_update_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow profile update HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	String profileUpdateWfNinetiethPercentileList = JMeterUtils.getProperty(&quot;profile_update_wf_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));	
	if(profileUpdateWfNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;profile_update_wf_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;profile_update_wf_ninetieth_percentile_list&quot;, profileUpdateWfNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final profile_update_wf_ninetieth_percentile_list = &quot; + JMeterUtils.getProperty(&quot;profile_update_wf_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_create_duration = &quot; + duration);	
	vars.put(&quot;member_profile_update_duration&quot;, String.valueOf(duration));
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow profile update HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${profile_update_wf_member_token} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="workflow member delete with data remove Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_member_remove_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_member_remove_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow member remove.create HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_member_remove_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/registration</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;));  
 
	Random random = new Random();
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));

     //create data object
     JsonObject dataObject = new JsonObject();
     // create status field
     dataObject.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     emailField.add(emailObj);
     dataObject.add(&quot;email&quot;, emailField);
 
     // create password field
     dataObject.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     dataObject.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     dataObject.add(&quot;address&quot;, addressField);
 
     // create username field
     dataObject.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     dataObject.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     dataObject.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     dataObject.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     dataObject.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     dataObject.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     dataObject.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     dataObject.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     dataObject.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     phoneField.add(phoneObj);
     dataObject.add(&quot;phone&quot;, phoneField);

     JsonObject finalDataObject = new JsonObject();
	finalDataObject.add(&quot;member&quot;, dataObject);
	payload.add(&quot;data&quot;, finalDataObject);

	vars.put(&quot;workflow_member_remove_create_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow member remove.create HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	

	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member token
	JsonObject dataObj = jsonObj.get(&quot;data&quot;).getAsJsonObject();
	
	//get member access token
	String memberAccessToken = dataObj.get(&quot;session&quot;).getAsJsonObject().get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;workflow_member_remove_create_access_token&quot;, memberAccessToken);

}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow member remove.create HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow member delete with data remove HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_member_remove_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/delete</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;));  
	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;member_remove_config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
     
	vars.put(&quot;workflow_member_remove_payload&quot;, payload.toString());    	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow member delete with data remove HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	long duration = prev.getTime();
	//log.info(&quot;wordfilter_delete_duration = &quot; + duration);	
	vars.put(&quot;workflow_member_remove_duration&quot;, String.valueOf(duration));

	//store response time
	String memberRemoveWfNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_remove_wf_ninetieth_percentile_list&quot;);
	
	if(memberRemoveWfNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;member_remove_wf_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
JMeterUtils.setProperty(&quot;member_remove_wf_ninetieth_percentile_list&quot;, memberRemoveWfNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow member delete with data remove HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${workflow_member_remove_create_access_token} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="workflow member delete Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_member_delete_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_member_delete_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow member delete.create HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_member_delete_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/registration</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;));  
 
	Random random = new Random();
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));

     //create data object
     JsonObject dataObject = new JsonObject();
     // create status field
     dataObject.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     emailField.add(emailObj);
     dataObject.add(&quot;email&quot;, emailField);
 
     // create password field
     dataObject.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     dataObject.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     dataObject.add(&quot;address&quot;, addressField);
 
     // create username field
     dataObject.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     dataObject.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     dataObject.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     dataObject.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     dataObject.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     dataObject.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     dataObject.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     dataObject.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     dataObject.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     phoneField.add(phoneObj);
     dataObject.add(&quot;phone&quot;, phoneField);

     JsonObject finalDataObject = new JsonObject();
	finalDataObject.add(&quot;member&quot;, dataObject);
	payload.add(&quot;data&quot;, finalDataObject);

	vars.put(&quot;workflow_member_delete_create_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow member delete.create HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	

	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member token
	JsonObject dataObj = jsonObj.get(&quot;data&quot;).getAsJsonObject();
	
	//get member access token
	String memberAccessToken = dataObj.get(&quot;session&quot;).getAsJsonObject().get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;workflow_member_delete_access_token&quot;, memberAccessToken);

}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow member delete.create HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow member delete HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_member_delete_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/delete</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;));  
	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;member_delete_config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
     
	vars.put(&quot;workflow_member_delete_payload&quot;, payload.toString());    	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow member delete HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	long duration = prev.getTime();
	//log.info(&quot;workflow_member_delete_duration = &quot; + duration);	
	vars.put(&quot;workflow_member_delete_duration&quot;, String.valueOf(duration));

	//store response time
	String memberDeleteWfNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_delete_wf_ninetieth_percentile_list&quot;);
	
	if(memberDeleteWfNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;member_delete_wf_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
JMeterUtils.setProperty(&quot;member_delete_wf_ninetieth_percentile_list&quot;, memberDeleteWfNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow member delete HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${workflow_member_delete_access_token} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="workflow forgot password Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_forgot_password_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_forgot_password_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow forgot password HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_forgot_password_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/forgot_password</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;));  
	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;forgot_password_config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
     //create data object
     JsonObject dataObject = new JsonObject();
	//get member id from global list if local scope is null 
	String memberId = vars.get(&quot;registration_wf_member_id&quot;);
	//log.info(&quot;memberId = &quot; + memberId);
	if(memberId == null){
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		//log.info(&quot;memberList = &quot; + memberList);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		//log.info(&quot;memberIds = &quot; + memberIds);
		Random random = new Random();
		vars.put(&quot;member_forgot_password_id&quot;, memberIds.get(random.nextInt(memberIds.size())));      	
	} else{
		vars.put(&quot;member_forgot_password_id&quot;, memberId);   		
	}
     // create username field
     dataObject.addProperty(&quot;member_identifier&quot;, vars.get(&quot;member_forgot_password_id&quot;));

	payload.add(&quot;data&quot;, dataObject);

	vars.put(&quot;workflow_forgot_password_payload&quot;, payload.toString());    	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow forgot password HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	
	//store response time
	String forgotPasswordWfNinetiethPercentileList = JMeterUtils.getProperty(&quot;forgot_password_wf_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(forgotPasswordWfNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;forgot_password_wf_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;forgot_password_wf_ninetieth_percentile_list&quot;, forgotPasswordWfNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final forgot_password_wf_ninetieth_percentile_list = &quot; + JMeterUtils.getProperty(&quot;forgot_password_wf_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;login_wf_duration = &quot; + duration);	
	vars.put(&quot;forgot_password_wf_duration&quot;, String.valueOf(duration));
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow forgot password HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="workflow forgot password with email Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_forgot_password_with_email_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_forgot_password_with_email_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow forgot password with email HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_forgot_password_with_email_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/forgot_password</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	vars.put(&quot;client_token_member_email_id&quot;,JMeterUtils.getProperty(&quot;client_token_member_email_id&quot;));  
	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;forgot_password_with_email_config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
     //create data object
     JsonObject dataObject = new JsonObject();
	//get member id from global list if local scope is null 
	String memberId = vars.get(&quot;registration_wf_member_id&quot;);
	//log.info(&quot;memberId = &quot; + memberId);
	if(memberId == null){
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		//log.info(&quot;memberList = &quot; + memberList);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		//log.info(&quot;memberIds = &quot; + memberIds);
		Random random = new Random();
		vars.put(&quot;member_forgot_password_with_email_id&quot;, memberIds.get(random.nextInt(memberIds.size())));      	
	} else{
		vars.put(&quot;member_forgot_password_with_email_id&quot;, memberId);   		
	}
     // create username field
     dataObject.addProperty(&quot;member_identifier&quot;, vars.get(&quot;email_to&quot;));

	payload.add(&quot;data&quot;, dataObject);

	vars.put(&quot;workflow_forgot_password_with_email_payload&quot;, payload.toString());    	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow forgot password with email HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{
**		
	//store response time
	String forgotPasswordWfNinetiethPercentileList = JMeterUtils.getProperty(&quot;forgot_password_with_email_wf_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(forgotPasswordWfNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;forgot_password_with_email_wf_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;forgot_password_with_email_wf_ninetieth_percentile_list&quot;, forgotPasswordWfNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final forgot_password_wf_ninetieth_percentile_list = &quot; + JMeterUtils.getProperty(&quot;forgot_password_wf_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;login_wf_duration = &quot; + duration);	
	vars.put(&quot;forgot_password_with_email_wf_duration&quot;, String.valueOf(duration));
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow forgot password with email HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_member_email_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="workflow reset password Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_reset_password_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_reset_password_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow reset password member.create HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_reset_password_member_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/registration</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;));  
 
	Random random = new Random();
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));

     //create data object
     JsonObject dataObject = new JsonObject();
     // create status field
     dataObject.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     emailField.add(emailObj);
     dataObject.add(&quot;email&quot;, emailField);
 
     // create password field
     dataObject.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     dataObject.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     dataObject.add(&quot;address&quot;, addressField);
 
     // create username field
     dataObject.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     dataObject.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     dataObject.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     dataObject.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     dataObject.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     dataObject.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     dataObject.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     dataObject.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     dataObject.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     phoneField.add(phoneObj);
     dataObject.add(&quot;phone&quot;, phoneField);

     JsonObject finalDataObject = new JsonObject();
	finalDataObject.add(&quot;member&quot;, dataObject);
	payload.add(&quot;data&quot;, finalDataObject);

	vars.put(&quot;workflow_reset_password_member_create_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow reset password member.create HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	

	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	JsonObject dataObj = jsonObj.get(&quot;data&quot;).getAsJsonObject();
	
	String id = dataObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;reset_password_member_id&quot;, id);

}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow reset password member.create HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow reset password forgot password HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_reset_password_forgot_password_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/forgot_password</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;));  
	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;forgot_password_config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
     //create data object
     JsonObject dataObject = new JsonObject();
     // create username field
     dataObject.addProperty(&quot;member_identifier&quot;, vars.get(&quot;reset_password_member_id&quot;));

	payload.add(&quot;data&quot;, dataObject);

	vars.put(&quot;workflow_reset_password_forgot_password_payload&quot;, payload.toString());    	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow reset password forgot password HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	//get member token
	JsonObject dataObj = jsonObj.get(&quot;data&quot;).getAsJsonObject();
	
	String token = dataObj.get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;token = &quot; + token);

	//store token for other sampler usage
	vars.put(&quot;workflow_reset_password_member_token&quot;, token);
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow reset password forgot password HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow reset password HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_reset_password_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/reset_password</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;));  
	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;reset_password_config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
     //create data object
     JsonObject dataObject = new JsonObject();
     // create username field
     dataObject.addProperty(&quot;password&quot;, &quot;newpassword&quot;);

	payload.add(&quot;data&quot;, dataObject);
	vars.put(&quot;workflow_reset_password_payload&quot;, payload.toString());    	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow reset password HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	long duration = prev.getTime();
	//log.info(&quot;workflow_reset_password_duration = &quot; + duration);	
	vars.put(&quot;workflow_reset_password_duration&quot;, String.valueOf(duration));

	//store response time
	String resetPasswordWfNinetiethPercentileList = JMeterUtils.getProperty(&quot;reset_password_wf_ninetieth_percentile_list&quot;);
	
	if(resetPasswordWfNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;reset_password_wf_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
JMeterUtils.setProperty(&quot;reset_password_wf_ninetieth_percentile_list&quot;, resetPasswordWfNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow reset password HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${workflow_reset_password_member_token} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="workflow login Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_login_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_login_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow login HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_login_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;));  
	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;login_config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
     //create data object
     JsonObject dataObject = new JsonObject();
	// create password field
     dataObject.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));
     //get member id from global list if local scope is null 
	String memberId = vars.get(&quot;registration_wf_member_id&quot;);
	//log.info(&quot;memberId = &quot; + memberId);
	if(memberId == null){
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		//log.info(&quot;memberList = &quot; + memberList);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		//log.info(&quot;memberIds = &quot; + memberIds);
		Random random = new Random();
		vars.put(&quot;member_login_id&quot;, memberIds.get(random.nextInt(memberIds.size())));      	
	} else{
		vars.put(&quot;member_login_id&quot;, memberId);   		
	}
     // create username field
     dataObject.addProperty(&quot;username&quot;, vars.get(&quot;member_login_id&quot;));

	payload.add(&quot;data&quot;, dataObject);

	vars.put(&quot;workflow_login_payload&quot;, payload.toString());    	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow login HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	String loginWfNinetiethPercentileList = JMeterUtils.getProperty(&quot;login_wf_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(loginWfNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;login_wf_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;login_wf_ninetieth_percentile_list&quot;, loginWfNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final login_wf_ninetieth_percentile_list = &quot; + JMeterUtils.getProperty(&quot;login_wf_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;login_wf_duration = &quot; + duration);	
	vars.put(&quot;login_wf_duration&quot;, String.valueOf(duration));
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow login HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="workflow logout Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_logout_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_logout_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow logout.  login HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_logout_login_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;));  
	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;login_config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
     //create data object
     JsonObject dataObject = new JsonObject();
	// create password field
     dataObject.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));
     //get member id from global list if local scope is null 
	String memberId = vars.get(&quot;registration_wf_member_id&quot;);
	//log.info(&quot;memberId = &quot; + memberId);
	if(memberId == null){
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		//log.info(&quot;memberList = &quot; + memberList);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		//log.info(&quot;memberIds = &quot; + memberIds);
		Random random = new Random();
		vars.put(&quot;member_login_id&quot;, memberIds.get(random.nextInt(memberIds.size())));      	
	} else{
		vars.put(&quot;member_login_id&quot;, memberId);   		
	}
     // create username field
     dataObject.addProperty(&quot;username&quot;, vars.get(&quot;member_login_id&quot;));

	payload.add(&quot;data&quot;, dataObject);

	vars.put(&quot;workflow_logout_login_payload&quot;, payload.toString());    	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow login HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{
/**		
	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_logout_duration = &quot; + duration);	
	vars.put(&quot;member_logout_duration&quot;, String.valueOf(duration));
**/	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	JsonObject dataObj = jsonObj.get(&quot;data&quot;).getAsJsonObject();
	
	String id = dataObj.get(&quot;member_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;member_logout_login_id&quot;, id);	

	//get member access token
	String memberAccessToken = dataObj.get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;member_access_token&quot;, memberAccessToken);
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow logout. login HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow logout HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_logout_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/logout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;));  
	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;logout_config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
     //create data object
     JsonObject dataObject = new JsonObject();
	
     //get member id from global list if local scope is null 
	String memberId = vars.get(&quot;member_logout_login_id&quot;);
	//log.info(&quot;memberId = &quot; + memberId);
	if(memberId == null){
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		//log.info(&quot;memberList = &quot; + memberList);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		//log.info(&quot;memberIds = &quot; + memberIds);
		Random random = new Random();
		vars.put(&quot;member_logout_id&quot;, memberIds.get(random.nextInt(memberIds.size())));      	
	} else{
		vars.put(&quot;member_logout_id&quot;, memberId);   		
	}
     // create username field
     dataObject.addProperty(&quot;member_id&quot;, vars.get(&quot;member_logout_id&quot;));

	payload.add(&quot;data&quot;, dataObject);

	vars.put(&quot;workflow_logout_payload&quot;, payload.toString());    	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow logout HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	String logoutWfNinetiethPercentileList = JMeterUtils.getProperty(&quot;logout_wf_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(logoutWfNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;logout_wf_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;logout_wf_ninetieth_percentile_list&quot;, logoutWfNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final logout_wf_ninetieth_percentile_list = &quot; + JMeterUtils.getProperty(&quot;logout_wf_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;logout_wf_duration = &quot; + duration);	
	vars.put(&quot;logout_wf_duration&quot;, String.valueOf(duration));
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow logout HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${member_access_token} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="workflow member link Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_member_link_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_member_link_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member token for member link HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/oauth/token?username=${site_id}:${member_link_id}&amp;password=${member_setup_pwd}&amp;grant_type=password&amp;scope=account_management</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import org.apache.jmeter.util.JMeterUtils;
import java.util.Random;


try{
	//encode and save client credentials
	Random random = new Random();
	String idNotNull = vars.get(&quot;api_key&quot;);
     String secretNotNull = &quot;password&quot;;
     String userCredentials = idNotNull + &quot;:&quot; + secretNotNull;
     final byte[] authBytes = userCredentials.getBytes(StandardCharsets.UTF_8);
	String encodedCredentials = Base64.encodeBase64String(authBytes);
	vars.put(&quot;encodedCredentialsMemberLink&quot;, encodedCredentials);
	// Get the member&apos;s &quot;_id&quot; value from the global list if the local scope is null.
	String memberId = vars.get(&quot;member_link_id&quot;);
	if (memberId == null) {
		String memberList = JMeterUtils.getProperty(&quot;memberId_list&quot;);
		List memberIds = new ArrayList(Arrays.asList(memberList.split(&quot;,&quot;)));
		Random random = new Random();
		memberId = memberIds.get(random.nextInt(memberIds.size()));
		vars.put(&quot;member_link_id&quot;, memberId);
		//vars.put(&quot;member_session_id&quot;, memberId);
	} 
	else {
		vars.put(&quot;member_link_id&quot;, memberId);
		//vars.put(&quot;member_session_id&quot;, memberId);
	}     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;Workflow member link Throughput Controller -&gt; &apos;member token for member.link HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.jmeter.util.JMeterUtils;

try {
	
	// Store the response body.
	JsonParser parser = new JsonParser();
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();
	
	// Grab the session token from the response.
	String id = jsonObj.get(&quot;access_token&quot;).getAsString();
	// Store it in a Jmeter variable.
	vars.put(&quot;member_link_token_id&quot;, id);
	
}
catch (Exception ex) {
	
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow member.link Throughput Controller&apos; -&gt; &apos;member token for member link HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos;. \n&quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${encodedCredentialsMemberLink}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow member link HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_member_link_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/link</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

try{
 
	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;member_link_config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
     //create data object
     JsonObject dataObject = new JsonObject();
     // Get a random Unique ID value.
	String provider = &quot;sqe_member_&quot; + UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;).substring(0,9).toLowerCase();
	// Push the generated value into a Jmeter variable so that it can be used in the request.
     dataObject.addProperty(&quot;provider&quot;, provider);
     // Get a random Unique ID value.
	String provider_id = UUID.randomUUID().toString().toLowerCase().replaceAll(&quot;-&quot;, &quot;&quot;);
	provider_id = provider_id.substring(0, provider_id.length() - 16);
	dataObject.addProperty(&quot;provider_id&quot;, provider_id);
	payload.add(&quot;data&quot;, dataObject);

	vars.put(&quot;workflow_member_link_payload&quot;, payload.toString());    	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow member link HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	String memberLinkWfNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_link_wf_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));
		
	if(memberLinkWfNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;member_link_wf_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;member_link_wf_ninetieth_percentile_list&quot;, memberLinkWfNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final member_link_wf_ninetieth_percentile_list = &quot; + JMeterUtils.getProperty(&quot;member_link_wf_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_link_wf_duration = &quot; + duration);	
	vars.put(&quot;member_link_wf_duration&quot;, String.valueOf(duration));
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow member link HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${member_link_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="workflow config create Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_config_create_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_config_create_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow config.create HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_config_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/${workflow_config_create_process}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{

	Random random = new Random();
	String[] process = { &quot;registration&quot;, &quot;login&quot;, &quot;logout&quot;, &quot;delete&quot; }; 
	String processValue = process[random.nextInt(process.length)];
	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_&quot; + processValue);
	payload.addProperty(&quot;process&quot;, processValue);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
	
	vars.put(&quot;workflow_config_create_payload&quot;, payload.toString());
	vars.put(&quot;workflow_config_create_process&quot;, processValue);
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow config.create HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;workflow_config_create_config_id&quot;, id);	

	//get config context
	String context = jsonObj.get(&quot;context&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;context = &quot; + context);

	//store context for other sampler usage
	vars.put(&quot;workflow_config_create_config_context&quot;, context);

	//get config process
	String process = jsonObj.get(&quot;process&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;context = &quot; + context);

	//store process for other sampler usage
	vars.put(&quot;workflow_config_create_config_process&quot;, process);
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow config.create HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="workflow config update Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_config_update_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_config_update_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow config.update HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_config_update_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/${workflow_config_update_process}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

int randomIndex = -1;
Random random = new Random();

try{

	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_new_name&quot;);
	
	//get workflow config id from global list if local scope is null 
	String configId = vars.get(&quot;workflow_config_create_config_id&quot;);
	if(configId == null){
		String configsList = JMeterUtils.getProperty(&quot;workflowId_list&quot;);
		List configIds = new ArrayList(Arrays.asList(configsList.split(&quot;,&quot;)));
		randomIndex = random.nextInt(configIds.size());
		//add config id to payload
		payload.addProperty(&quot;_id&quot;, configIds.get(randomIndex));
	} else{
		payload.addProperty(&quot;_id&quot;, configId);		
	}
	//get wordfilter config context from global list if local scope is null 
	String configContext = vars.get(&quot;workflow_config_create_config_context&quot;);
	if(configContext == null){
		String configContextList = JMeterUtils.getProperty(&quot;workflowContext_list&quot;);
		List configContexts = new ArrayList(Arrays.asList(configContextList.split(&quot;,&quot;)));
		randomIndex = randomIndex &gt; -1 ? randomIndex : random.nextInt(configContexts.size());
		
		//add config id to payload
		payload.addProperty(&quot;context&quot;, configContexts.get(randomIndex));
	} else{
		payload.addProperty(&quot;context&quot;, configContext);		
	}
			
	//get wordfilter config process from global list if local scope is null 
	String configProcess = vars.get(&quot;workflow_config_create_config_process&quot;);
	if(configProcess == null){
		String configProcessList = JMeterUtils.getProperty(&quot;workflowProcess_list&quot;);
		List configProcesses = new ArrayList(Arrays.asList(configProcessList.split(&quot;,&quot;)));
		randomIndex = randomIndex &gt; -1 ? randomIndex : random.nextInt(configProcesses.size());
		
		//add config id to payload
		configProcess = configProcesses.get(randomIndex);
		payload.addProperty(&quot;process&quot;, configProcess);
	} else{
		payload.addProperty(&quot;process&quot;, configProcess);		
	}
	
     //log.info(&quot;wordfilter_create_payload = &quot; + payload.toString());
	vars.put(&quot;workflow_config_update_payload&quot;, payload.toString());	
	vars.put(&quot;workflow_config_update_process&quot;, configProcess);	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow config.update HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
/**	
	//store response time
	String workflowConfigUpdateNinetiethPercentileList = JMeterUtils.getProperty(&quot;workflow_config_update_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));	
	if(workflowConfigUpdateNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;workflow_config_update_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;workflow_config_update_ninetieth_percentile_list&quot;, workflowConfigUpdateNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final workflow_config_update_ninetieth_percentile_list = &quot; + JMeterUtils.getProperty(&quot;workflow_config_update_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;workflow_config_update_duration = &quot; + duration);	
	vars.put(&quot;workflow_config_update_duration&quot;, String.valueOf(duration));
**/	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;workflow_config_update_config_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow config.update HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="workflow config get Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_config_get_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_config_get_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow config.get HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/${workflow_config_get_process}/${workflow_config_get_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

int randomIndex = -1;

try{
	//get workflow config id from global list if local scope is null 
	String configId = vars.get(&quot;workflow_config_create_config_id&quot;);
	if (configId == null) {
		String configsList = JMeterUtils.getProperty(&quot;workflowId_list&quot;);
		List configIds = new ArrayList(Arrays.asList(configsList.split(&quot;,&quot;)));
		Random random = new Random();
		String configProcessList = JMeterUtils.getProperty(&quot;workflowProcess_list&quot;);
		List configProcesses = new ArrayList(Arrays.asList(configProcessList.split(&quot;,&quot;)));
		//set config id
 		randomIndex = random.nextInt(configIds.size());
		vars.put(&quot;workflow_config_get_id&quot;, configIds.get(randomIndex));
	} else {
		vars.put(&quot;workflow_config_get_id&quot;, configId);
	}
	//get wordfilter config process from global list if local scope is null 
	String configProcess = vars.get(&quot;workflow_config_create_config_process&quot;);
	if (configProcess == null) {
		String configProcessList = JMeterUtils.getProperty(&quot;workflowProcess_list&quot;);
		List configProcesses = new ArrayList(Arrays.asList(configProcessList.split(&quot;,&quot;)));
		configProcess = configProcesses.get(randomIndex);
	}
	vars.put(&quot;workflow_config_get_process&quot;, configProcess);	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow config.get HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{

	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;workflow_config_get_config_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow config.get HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="workflow config delete Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_config_delete_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_config_delete_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow config delete.create HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_config_delete_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/${workflow_config_create_delete_process}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;)); 
	Random random = new Random();
	String[] process = { &quot;registration&quot;, &quot;login&quot;, &quot;logout&quot;, &quot;delete&quot; }; 
	String processValue = process[random.nextInt(process.length)];
	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;workflow&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_&quot; + processValue);
	payload.addProperty(&quot;process&quot;, processValue);
	payload.addProperty(&quot;context&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
	
	vars.put(&quot;workflow_config_delete_create_payload&quot;, payload.toString());
	//store process for other sampler usage
	vars.put(&quot;workflow_config_create_delete_process&quot;, processValue);	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow config delete.create HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;workflow_config_create_delete_id&quot;, id);
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow config delete.create HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow config.delete HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/workflows/${workflow_config_create_delete_process}/${workflow_config_create_delete_id}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	long duration = prev.getTime();
	//log.info(&quot;wordfilter_delete_duration = &quot; + duration);	
	vars.put(&quot;workflow_config_delete_duration&quot;, String.valueOf(duration));

	//store response time
	String workflowConfigDeleteNinetiethPercentileList = JMeterUtils.getProperty(&quot;workflow_config_delete_ninetieth_percentile_list&quot;);
	
	if(workflowConfigDeleteNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;workflow_config_delete_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
		JMeterUtils.setProperty(&quot;workflow_config_delete_ninetieth_percentile_list&quot;, workflowConfigDeleteNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow config.delete HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="workflow member get Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_member_get_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_member_get_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow member get.registration HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_get_workflow_registration_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/registration</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	vars.put(&quot;client_token_id&quot;,JMeterUtils.getProperty(&quot;client_token_id&quot;));  
 
	Random random = new Random();
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));

     //create data object
     JsonObject dataObject = new JsonObject();
     // create status field
     dataObject.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     emailField.add(emailObj);
     dataObject.add(&quot;email&quot;, emailField);
 
     // create password field
     dataObject.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     dataObject.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     dataObject.add(&quot;address&quot;, addressField);
 
     // create username field
     dataObject.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     dataObject.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     dataObject.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     dataObject.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     dataObject.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     dataObject.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     dataObject.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     dataObject.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     dataObject.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     phoneField.add(phoneObj);
     dataObject.add(&quot;phone&quot;, phoneField);

     JsonObject finalDataObject = new JsonObject();
	finalDataObject.add(&quot;member&quot;, dataObject);
	payload.add(&quot;data&quot;, finalDataObject);

	vars.put(&quot;member_get_workflow_registration_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow member get HTTP Request&apos;-&gt; workflow member get.registration -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	JsonObject dataObj = jsonObj.get(&quot;data&quot;).getAsJsonObject();
	
	String id = dataObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;member_get_wf_member_id&quot;, id);

	//store token
	String token = dataObj.get(&quot;session&quot;).getAsJsonObject().get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;token = &quot; + token);

	//store token for other sampler usage
	vars.put(&quot;member_get_wf_member_token&quot;, token);
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow member get HTTP Request&apos;-&gt; workflow member get.registration -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow member get HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${member_get_workflow_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	
	Random random = new Random();
	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;member_get_config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));

	vars.put(&quot;member_get_workflow_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow member get HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	String memberGetWfNinetiethPercentileList = JMeterUtils.getProperty(&quot;member_get_wf_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));	
	if(memberGetWfNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;member_get_wf_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;member_get_wf_ninetieth_percentile_list&quot;, memberGetWfNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final memberGetWfNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;memberGetWfNinetiethPercentileList&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;member_get_workflow_duration = &quot; + duration);	
	vars.put(&quot;member_get_workflow_duration&quot;, String.valueOf(duration));
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow member get HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${member_get_wf_member_token} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="(disabled) workflow verify_member_info with email Throughput Controller" enabled="false">
          <intProp name="ThroughputController.style">0</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${workflow_verify_member_info_with_email_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${workflow_forgot_password_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow registration with email HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_registration_with_email_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/registration</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//set client token id
	vars.put(&quot;client_token_member_email_id&quot;,JMeterUtils.getProperty(&quot;client_token_member_email_id&quot;));  
 
	Random random = new Random();
	String[] status = { &quot;active&quot; };
     boolean[] bool = {true, false};
	String[] gender = { &quot;m&quot;, &quot;f&quot;, &quot;d&quot; };  

	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;registration_with_email_config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));

     //create data object
     JsonObject dataObject = new JsonObject();
     // create status field
     dataObject.addProperty(&quot;status&quot;, status[random.nextInt(status.length)]);

     // create email field
     JsonArray emailField = new JsonArray();
     JsonObject emailObj = new JsonObject();
     emailObj.addProperty(&quot;address&quot;, &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId() + &quot;@nbcuni.com&quot;);
     emailField.add(emailObj);
     dataObject.add(&quot;email&quot;, emailField);
 
     // create password field
     dataObject.addProperty(&quot;password&quot;, vars.get(&quot;member_setup_pwd&quot;));

     // create gender field
     dataObject.addProperty(&quot;gender&quot;, gender[random.nextInt(gender.length)]);

     // create address field
     JsonArray addressField = new JsonArray();
     JsonObject addressObj = new JsonObject();
     addressObj.addProperty(&quot;address1&quot;, &quot;Address1_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;address2&quot;, &quot;Address2_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     addressObj.addProperty(&quot;city&quot;, &quot;Universal City&quot;);
     addressObj.addProperty(&quot;state&quot;, &quot;CA&quot;);
     addressObj.addProperty(&quot;postalcode&quot;, &quot;91608&quot;);
     addressObj.addProperty(&quot;country&quot;, &quot;US&quot;);
     addressObj.addProperty(&quot;type&quot;, &quot;home&quot;);
     addressField.add(addressObj);
     dataObject.add(&quot;address&quot;, addressField);
 
     // create username field
     dataObject.addProperty(&quot;username&quot;, &quot;Username_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create screenname field
     dataObject.addProperty(&quot;screenname&quot;, &quot;Screenname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create avatar field
     dataObject.addProperty(&quot;avatar&quot;,
                &quot;http://images.sodahead.com/profiles/000608188/profiles_avatar4_2324_701835_media.jpeg&quot;);

     // create prefix field
     dataObject.addProperty(&quot;prefix&quot;, &quot;PREFIX_&quot;);

     // create firstname field
     dataObject.addProperty(&quot;firstname&quot;, &quot;firstname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create middlename field
     dataObject.addProperty(&quot;middlename&quot;, &quot;middlename_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create lastname field
     dataObject.addProperty(&quot;lastname&quot;, &quot;lastname_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());

     // create suffix field
     dataObject.addProperty(&quot;suffix&quot;, &quot;_SUFFIX&quot;);

     dataObject.add(&quot;birthdate&quot;, null);

     // create phone field
     JsonArray phoneField = new JsonArray();
     JsonObject phoneObj = new JsonObject();
     phoneObj.addProperty(&quot;number&quot;, &quot;8187771000&quot;);
     phoneField.add(phoneObj);
     dataObject.add(&quot;phone&quot;, phoneField);

     // create brand_data field
     JsonObject brandDataObj = new JsonObject();
     brandDataObj.addProperty(&quot;information&quot;, &quot;information_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     brandDataObj.addProperty(&quot;announcement&quot;, &quot;announcement_&quot; + &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId());
     dataObject.add(&quot;brand_data&quot;, brandDataObj);

	payload.add(&quot;data&quot;, dataObject);

	vars.put(&quot;workflow_registration_with_email_payload&quot;, payload.toString());
     	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow verify_member_info with email Throughput Controller&apos; -&gt; &apos;workflow registration with email HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	JsonObject dataObj = jsonObj.get(&quot;data&quot;).getAsJsonObject();
	
	String id = dataObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;registration_with_email_wf_member_id&quot;, id);	

	String emailAddress = dataObj.get(&quot;email_address&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;email_address = &quot; + email_address);

	//store emailAddress for other sampler usage
	vars.put(&quot;registration_with_email_wf_email_address&quot;, emailAddress);

	//get member access token
	String memberAccessToken = dataObj.get(&quot;verification_token&quot;).getAsJsonObject().get(&quot;access_token&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	vars.put(&quot;registration_with_email_wf_access_token&quot;, memberAccessToken);
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow verify_member_info with email Throughput Controller&apos; -&gt; &apos;workflow registration with email HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_member_email_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="workflow verify member info HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${workflow_verify_member_info_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/workflows/verify_member_info</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	// create payload
	JsonObject payload = new JsonObject();
	//add config id
	payload.addProperty(&quot;config_id&quot;, JMeterUtils.getProperty(&quot;verify_member_info_config_id&quot;));
	//add site id
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
     //create data object
     JsonObject dataObject = new JsonObject();

	// set verification_channel field
     dataObject.addProperty(&quot;verification_channel&quot;, &quot;email&quot;);
     
     // set member_account_information field
     dataObject.addProperty(&quot;member_info&quot;, vars.get(&quot;registration_with_email_wf_email_address&quot;));

	payload.add(&quot;data&quot;, dataObject);

	vars.put(&quot;workflow_verify_member_info_payload&quot;, payload.toString());    	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow verify member info HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	String verifyMemberInfoWfNinetiethPercentileList = JMeterUtils.getProperty(&quot;verify_member_info_wf_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));	
	if(verifyMemberInfoWfNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;verify_member_info_wf_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;verify_member_info_wf_ninetieth_percentile_list&quot;, verifyMemberInfoWfNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final verifyMemberInfoWfNinetiethPercentileList = &quot; + JMeterUtils.getProperty(&quot;verifyMemberInfoWfNinetiethPercentileList&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;verify_member_info_wf_duration = &quot; + duration);	
	vars.put(&quot;verify_member_info_wf_duration&quot;, String.valueOf(duration));
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;workflow verify member info HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${registration_with_email_wf_access_token} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="(disabled) wordfilter create Throughput Controller" enabled="false">
          <intProp name="ThroughputController.style">0</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${wordfilter_create_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${wordfilter_create_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="wordfilter.create HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${wordfilter_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/wordfilters</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;wordfilter&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_wordfilter&quot;);
	String context = &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId();
	payload.addProperty(&quot;context&quot;, context);
	vars.put(&quot;wordfilter_create_config_context&quot;, context);
	JsonArray profanityList = new JsonArray();
     profanityList.add(new JsonPrimitive(&quot;abc&quot;));
     profanityList.add(new JsonPrimitive(&quot;def&quot;));
     profanityList.add(new JsonPrimitive(&quot;geh&quot;));
	payload.add(&quot;profanity_list&quot;, profanityList);
     //log.info(&quot;wordfilter_create_payload = &quot; + payload.toString());
	vars.put(&quot;wordfilter_create_payload&quot;, payload.toString());	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;wordfilter.create HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	String wordfilterCreateNinetiethPercentileList = JMeterUtils.getProperty(&quot;wordfilter_create_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));	
	if(wordfilterCreateNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;wordfilter_create_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;wordfilter_create_ninetieth_percentile_list&quot;, wordfilterCreateNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final wordfilter_create_ninetieth_percentile_list = &quot; + JMeterUtils.getProperty(&quot;wordfilter_create_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;wordfilter_create_duration = &quot; + duration);	
	vars.put(&quot;wordfilter_create_duration&quot;, String.valueOf(duration));
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;wordfilter_create_config_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;wordfilter.create HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="(disabled) wordfilter update Throughput Controller" enabled="false">
          <intProp name="ThroughputController.style">0</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${wordfilter_update_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${wordfilter_update_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="wordfilter.update HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${wordfilter_update_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/wordfilters</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;wordfilter&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_wordfilter&quot;);
	JsonArray profanityList = new JsonArray();
     profanityList.add(new JsonPrimitive(&quot;abc&quot;));
     profanityList.add(new JsonPrimitive(&quot;defg&quot;));
     profanityList.add(new JsonPrimitive(&quot;geh&quot;));
	payload.add(&quot;profanity_list&quot;, profanityList);
	//get wordfilter config id from global list if local scope is null 
	String configId = vars.get(&quot;wordfilter_create_config_id&quot;);
	if(configId == null){
		String configsList = JMeterUtils.getProperty(&quot;wordfilterId_list&quot;);
		List configIds = new ArrayList(Arrays.asList(configsList.split(&quot;,&quot;)));
		Random random = new Random();

		//add config id to payload
		payload.addProperty(&quot;_id&quot;, configIds.get(random.nextInt(configIds.size())));
	
	} else{
		payload.addProperty(&quot;_id&quot;, configId);		
	}
	//get wordfilter config context from global list if local scope is null 
	String configContext = vars.get(&quot;wordfilter_create_config_context&quot;);
	if(configContext == null){
		String configContextList = JMeterUtils.getProperty(&quot;wordfilterContext_list&quot;);
		List configContexts = new ArrayList(Arrays.asList(configContextList.split(&quot;,&quot;)));
		Random random = new Random();

		//add config id to payload
		payload.addProperty(&quot;context&quot;, configContexts.get(random.nextInt(configContexts.size())));
	
	} else{
		payload.addProperty(&quot;context&quot;, configContext);		
	}
	
     //log.info(&quot;wordfilter_create_payload = &quot; + payload.toString());
	vars.put(&quot;wordfilter_update_payload&quot;, payload.toString());	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;wordfilter.update HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	String wordfilterUpdateNinetiethPercentileList = JMeterUtils.getProperty(&quot;wordfilter_update_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));	
	if(wordfilterUpdateNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;wordfilter_update_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;wordfilter_update_ninetieth_percentile_list&quot;, wordfilterUpdateNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final wordfilter_update_ninetieth_percentile_list = &quot; + JMeterUtils.getProperty(&quot;wordfilter_update_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;wordfilter_update_duration = &quot; + duration);	
	vars.put(&quot;wordfilter_update_duration&quot;, String.valueOf(duration));
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;wordfilter_update_config_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;wordfilter.update HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="(disabled) wordfilter get Throughput Controller" enabled="false">
          <intProp name="ThroughputController.style">0</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${wordfilter_get_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${wordfilter_get_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="wordfilter.get HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/wordfilters/${wordfilter_get_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	//get wordfilter config id from global list if local scope is null 
	String configId = vars.get(&quot;wordfilter_create_config_id&quot;);
	if(configId == null){
		String configsList = JMeterUtils.getProperty(&quot;wordfilterId_list&quot;);
		List configIds = new ArrayList(Arrays.asList(configsList.split(&quot;,&quot;)));
		Random random = new Random();

		//set config id
		vars.put(&quot;wordfilter_get_id&quot;, configIds.get(random.nextInt(configIds.size())));
	} else{
		vars.put(&quot;wordfilter_get_id&quot;, configId);
	}
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;wordfilter.get HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	String wordfilterGetNinetiethPercentileList = JMeterUtils.getProperty(&quot;wordfilter_get_ninetieth_percentile_list&quot;);
	long rps = prev.getTime();
	//log.info(&quot;rps = &quot; + String.valueOf(rps));	
	if(wordfilterGetNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;wordfilter_get_ninetieth_percentile_list&quot;, String.valueOf(rps));		
	} else{
		JMeterUtils.setProperty(&quot;wordfilter_get_ninetieth_percentile_list&quot;, wordfilterGetNinetiethPercentileList +&quot;,&quot;+ String.valueOf(rps));		
	}

	//log.info(&quot;Final wordfilter_get_ninetieth_percentile_list = &quot; + JMeterUtils.getProperty(&quot;wordfilter_get_ninetieth_percentile_list&quot;));	

	//store response time
	long duration = prev.getTime();
	//log.info(&quot;wordfilter_get_duration = &quot; + duration);	
	vars.put(&quot;wordfilter_get_duration&quot;, String.valueOf(duration));
	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get config id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;wordfilter_get_config_id&quot;, id);	
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;wordfilter.get HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="(disabled) wordfilter delete Throughput Controller" enabled="false">
          <intProp name="ThroughputController.style">0</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <stringProp name="ThroughputController.maxThroughput">${wordfilter_delete_dstr_pct}</stringProp>
          <stringProp name="ThroughputController.percentThroughput">${wordfilter_delete_dstr_pct}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="wordfilter delete.create HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${wordfilter_delete_create_payload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/wordfilters</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

try{
	// create payload
     JsonObject payload = new JsonObject();

	//add type
	payload.addProperty(&quot;type&quot;, &quot;wordfilter&quot;);
	payload.addProperty(&quot;site_id&quot;, vars.get(&quot;site_id&quot;));
	payload.addProperty(&quot;name&quot;, &quot;standard_wordfilter&quot;);
	String context = &quot;SQE&quot; + System.currentTimeMillis() + Thread.currentThread().getId();
	payload.addProperty(&quot;context&quot;, context);
	vars.put(&quot;wordfilter_create_config_context&quot;, context);
	JsonArray profanityList = new JsonArray();
     profanityList.add(new JsonPrimitive(&quot;abc&quot;));
     profanityList.add(new JsonPrimitive(&quot;def&quot;));
     profanityList.add(new JsonPrimitive(&quot;geh&quot;));
	payload.add(&quot;profanity_list&quot;, profanityList);
     //log.info(&quot;wordfilter_create_payload = &quot; + payload.toString());
	vars.put(&quot;wordfilter_delete_create_payload&quot;, payload.toString());	
}
catch (Exception ex){
    log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;wordfilter delete.create HTTP Request&apos; -&gt; &apos;BeanShell PreProcessor&apos; &quot;);
    throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//get json response
	JsonParser parser = new JsonParser();
	//log.info(&quot;prev.getResponseDataAsString() = &quot; + prev.getResponseDataAsString());
	JsonObject jsonObj = parser.parse(prev.getResponseDataAsString()).getAsJsonObject();

	//get member id
	String id = jsonObj.get(&quot;_id&quot;).toString().replace(&quot;\&quot;&quot;, &quot;&quot;);
	//log.info(&quot;_id = &quot; + id);

	//store id for other sampler usage
	vars.put(&quot;wordfilter_create_delete_id&quot;, id);
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;wordfilter delete.create HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="wordfilter.delete HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/configs/wordfilters/${wordfilter_create_delete_id}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

try{	
	//store response time
	long duration = prev.getTime();
	//log.info(&quot;wordfilter_delete_duration = &quot; + duration);	
	vars.put(&quot;wordfilter_delete_duration&quot;, String.valueOf(duration));

	//store response time
	String wordfilterDeleteNinetiethPercentileList = JMeterUtils.getProperty(&quot;wordfilter_delete_ninetieth_percentile_list&quot;);
	
	if(wordfilterDeleteNinetiethPercentileList.isEmpty()){
		JMeterUtils.setProperty(&quot;wordfilter_delete_ninetieth_percentile_list&quot;, String.valueOf(prev.getTime()));		
	} else{
		JMeterUtils.setProperty(&quot;wordfilter_delete_ninetieth_percentile_list&quot;, wordfilterDeleteNinetiethPercentileList +&quot;,&quot;+ String.valueOf(prev.getTime()));		
	}
	
}
catch (Exception ex){
	log.error(&quot;Error in &apos;Workflow Thread Group&apos; -&gt; &apos;wordfilter.delete HTTP Request&apos; -&gt; &apos;BeanShell PostProcessor&apos; &quot;);
	throw ex; // elsewise JMeter will &quot;swallow&quot; the above exception
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">${Content-Type-Json}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${client_token_id} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Peak Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
